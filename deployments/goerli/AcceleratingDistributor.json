{
  "address": "0xA59CE9FDFf8a0915926C2AF021d54E58f9B207CC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenCumulativeStaked",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoverToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsToSend",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenLastUpdateTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenRewardPerTokenStored",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userRewardsOutstanding",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userRewardsPaidPerToken",
          "type": "uint256"
        }
      ],
      "name": "RewardsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "averageDepositTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumulativeBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenCumulativeStaked",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseEmissionRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxMultiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "secondsToMaxMultiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        }
      ],
      "name": "TokenConfiguredForStaking",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingCumulativeBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenCumulativeStaked",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        }
      ],
      "name": "baseRewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "baseEmissionRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "secondsToMaxMultiplier",
          "type": "uint256"
        }
      ],
      "name": "configureStakingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getAverageDepositTimePostDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        }
      ],
      "name": "getCumulativeStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOutstandingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTimeSinceAverageDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserRewardMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "cumulativeBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averageDepositTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardsAccumulatedPerToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardsOutstanding",
              "type": "uint256"
            }
          ],
          "internalType": "struct AcceleratingDistributor.UserDeposit",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "recoverToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "stakeFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "baseEmissionRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "secondsToMaxMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumulativeStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerTokenStored",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        }
      ],
      "name": "withdrawReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd30c837c882249e54402e361bd514dfc4f72430b9d84b276808a0342d6ee2451",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0xA59CE9FDFf8a0915926C2AF021d54E58f9B207CC",
    "transactionIndex": 12,
    "gasUsed": "2133088",
    "logsBloom": "0x
    "blockHash": "0x39900239289b17e41cf781c4e778d4a34b8b31062ce259eaff3236dbbf956961",
    "transactionHash": "0xd30c837c882249e54402e361bd514dfc4f72430b9d84b276808a0342d6ee2451",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 7885293,
        "transactionHash": "0xd30c837c882249e54402e361bd514dfc4f72430b9d84b276808a0342d6ee2451",
        "address": "0xA59CE9FDFf8a0915926C2AF021d54E58f9B207CC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009a8f92a830a5cb89a3816e3d267cb7791c16b04d"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x39900239289b17e41cf781c4e778d4a34b8b31062ce259eaff3236dbbf956961"
      }
    ],
    "blockNumber": 7885293,
    "cumulativeGasUsed": "3726526",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x40153DdFAd90C49dbE3F5c9F96f2a5B25ec67461"],
  "numDeployments": 1,
  "solcInputHash": "17686732f199602ed40e6e94df0fb034",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCumulativeStaked\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsToSend\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLastUpdateTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenRewardPerTokenStored\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userRewardsOutstanding\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userRewardsPaidPerToken\",\"type\":\"uint256\"}],\"name\":\"RewardsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"averageDepositTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCumulativeStaked\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseEmissionRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondsToMaxMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"}],\"name\":\"TokenConfiguredForStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingCumulativeBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCumulativeStaked\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"baseRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"baseEmissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsToMaxMultiplier\",\"type\":\"uint256\"}],\"name\":\"configureStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAverageDepositTimePostDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"getCumulativeStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOutstandingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTimeSinceAverageDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserRewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cumulativeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageDepositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsAccumulatedPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsOutstanding\",\"type\":\"uint256\"}],\"internalType\":\"struct AcceleratingDistributor.UserDeposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"baseEmissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsToMaxMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"baseRewardPerToken(address)\":{\"details\":\"the value returned is represented by a uint256 with fixed precision of 18 decimals.\",\"params\":{\"stakedToken\":\"The address of the staked token to query.\"},\"returns\":{\"_0\":\"uint256 Total base reward per token that will be applied, pro-rata, to stakers.\"}},\"configureStakingToken(address,bool,uint256,uint256,uint256)\":{\"details\":\"The owner should ensure that the token enabled is a standard ERC20 token to ensure correct functionality.\",\"params\":{\"baseEmissionRate\":\"The base emission rate for staking the token. This is split pro-rata between all users.\",\"enabled\":\"Whether the token is enabled for staking.\",\"maxMultiplier\":\"The maximum multiplier for staking which increases your rewards the longer you stake.\",\"secondsToMaxMultiplier\":\"The number of seconds needed to stake to reach the maximum multiplier.\",\"stakedToken\":\"The address of the token that can be staked.\"}},\"exit(address)\":{\"details\":\"Calling this method will reset the caller's reward multiplier.\",\"params\":{\"stakedToken\":\"The address of the token to get rewards for.\"}},\"getAverageDepositTimePostDeposit(address,address,uint256)\":{\"params\":{\"account\":\"The address of the user to query.\",\"stakedToken\":\"The address of the staked token to query.\"},\"returns\":{\"_0\":\"uint256 Average post deposit time, considering all deposits to date.\"}},\"getCumulativeStaked(address)\":{\"params\":{\"stakedToken\":\"The address of the staked token to query.\"},\"returns\":{\"_0\":\"uint256 Total amount staked of the stakedToken.\"}},\"getOutstandingRewards(address,address)\":{\"params\":{\"account\":\"The address of the user to query.\",\"stakedToken\":\"The address of the staked token to query.\"},\"returns\":{\"_0\":\"uint256 Total outstanding rewards entitled to user.\"}},\"getTimeSinceAverageDeposit(address,address)\":{\"params\":{\"account\":\"The address of the user to query.\",\"stakedToken\":\"The address of the staked token to query.\"},\"returns\":{\"_0\":\"uint256 Time, in seconds, between the users average deposit time and the current time.\"}},\"getUserRewardMultiplier(address,address)\":{\"details\":\"the value returned is represented by a uint256 with fixed precision of 18 decimals.\",\"params\":{\"account\":\"The address of the user to query.\",\"stakedToken\":\"The address of the staked token to query.\"},\"returns\":{\"_0\":\"uint256 User multiplier, applied to the baseRewardPerToken, when claiming rewards.\"}},\"getUserStake(address,address)\":{\"params\":{\"account\":\"The address of user to query.\",\"stakedToken\":\"The address of the staked token to query.\"},\"returns\":{\"_0\":\"UserDeposit Struct with: {cumulativeBalance,averageDepositTime,rewardsAccumulatedPerToken,rewardsOutstanding}\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverToken(address)\":{\"params\":{\"token\":\"The address of the token to skim.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stake(address,uint256)\":{\"details\":\"The caller of this function must approve this contract to spend amount of stakedToken.\",\"params\":{\"amount\":\"The amount of the token to stake.\",\"stakedToken\":\"The address of the token to stake.\"}},\"stakeFor(address,uint256,address)\":{\"details\":\"The caller of this function must approve this contract to spend amount of stakedToken.The caller of this function is effectively donating their tokens to the beneficiary. The beneficiary can then unstake or claim rewards as they wish.\",\"params\":{\"amount\":\"The amount of the token to stake.\",\"beneficiary\":\"User that caller wants to stake on behalf of.\",\"stakedToken\":\"The address of the token to stake.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(address,uint256)\":{\"params\":{\"amount\":\"The amount of the token to withdraw.\",\"stakedToken\":\"The address of the token to withdraw.\"}},\"withdrawReward(address)\":{\"details\":\"Calling this method will reset the caller's reward multiplier.\",\"params\":{\"stakedToken\":\"The address of the token to get rewards for.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"baseRewardPerToken(address)\":{\"notice\":\"Returns the base rewards per staked token for a given staking token. This factors in the last time any internal logic was called on this contract to correctly attribute retroactive cumulative rewards.\"},\"configureStakingToken(address,bool,uint256,uint256,uint256)\":{\"notice\":\"Enable a token for staking.\"},\"exit(address)\":{\"notice\":\"Exits a staking position by unstaking and getting rewards. This totally exits the staking position.\"},\"getAverageDepositTimePostDeposit(address,address,uint256)\":{\"notice\":\"Returns a users new average deposit time, considering the addition of a new deposit. This factors in the cumulative previous deposits, new deposit and time from the last deposit.\"},\"getCumulativeStaked(address)\":{\"notice\":\"Returns the total staked for a given stakedToken.\"},\"getOutstandingRewards(address,address)\":{\"notice\":\"Returns the total outstanding rewards entitled to a user for a given staking token. This factors in the users staking duration (and therefore reward multiplier) and their pro-rata share of the total rewards.\"},\"getTimeSinceAverageDeposit(address,address)\":{\"notice\":\"Returns the time that has elapsed between the current time and the last users average deposit time.\"},\"getUserRewardMultiplier(address,address)\":{\"notice\":\"Returns the multiplier applied to the base reward per staked token for a given staking token and account. The longer a user stakes the higher their multiplier up to maxMultiplier for that given staking token. any internal logic was called on this contract to correctly attribute retroactive cumulative rewards.\"},\"getUserStake(address,address)\":{\"notice\":\"Returns all the information associated with a user's stake.\"},\"recoverToken(address)\":{\"notice\":\"Enables the owner to recover tokens dropped onto the contract. This could be used to remove unclaimed staking rewards or recover excess LP tokens that were inadvertently dropped onto the contract. Importantly, the contract will only let the owner recover staked excess tokens above what the contract thinks it should have. i.e the owner cant use this method to steal staked tokens, only recover excess ones mistakenly sent to the contract.\"},\"stake(address,uint256)\":{\"notice\":\"Stake tokens for rewards.\"},\"stakeFor(address,uint256,address)\":{\"notice\":\"Stake tokens for rewards on behalf of `beneficiary`.\"},\"unstake(address,uint256)\":{\"notice\":\"Withdraw staked tokens.\"},\"withdrawReward(address)\":{\"notice\":\"Get entitled rewards for the staker.\"}},\"notice\":\"Across token distribution contract. Contract is inspired by Synthetix staking contract and Ampleforth geyser. Stakers start by earning their pro-rata share of a baseEmissionRate per second which increases based on how long they have staked in the contract, up to a max emission rate of baseEmissionRate * maxMultiplier. Multiple LP tokens can be staked in this contract enabling depositors to batch stake and claim via multicall. Note that this contract is only compatible with standard ERC20 tokens, and not tokens that charge fees on transfers, dynamically change balance, or have double entry-points. It's up to the contract owner to ensure they only add supported tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AcceleratingDistributor.sol\":\"AcceleratingDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x35e30a35e23f856cbcee3558b7efdd83f6017a8f1b419710645143d98e892463\",\"license\":\"MIT\"},\"contracts/AcceleratingDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\n\\n/**\\n * @notice Across token distribution contract. Contract is inspired by Synthetix staking contract and Ampleforth geyser.\\n * Stakers start by earning their pro-rata share of a baseEmissionRate per second which increases based on how long\\n * they have staked in the contract, up to a max emission rate of baseEmissionRate * maxMultiplier. Multiple LP tokens\\n * can be staked in this contract enabling depositors to batch stake and claim via multicall. Note that this contract is\\n * only compatible with standard ERC20 tokens, and not tokens that charge fees on transfers, dynamically change\\n * balance, or have double entry-points. It's up to the contract owner to ensure they only add supported tokens.\\n */\\n\\ncontract AcceleratingDistributor is ReentrancyGuard, Ownable, Multicall {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable rewardToken;\\n\\n    // Each User deposit is tracked with the information below.\\n    struct UserDeposit {\\n        uint256 cumulativeBalance;\\n        uint256 averageDepositTime;\\n        uint256 rewardsAccumulatedPerToken;\\n        uint256 rewardsOutstanding;\\n    }\\n\\n    struct StakingToken {\\n        bool enabled;\\n        uint256 baseEmissionRate;\\n        uint256 maxMultiplier;\\n        uint256 secondsToMaxMultiplier;\\n        uint256 cumulativeStaked;\\n        uint256 rewardPerTokenStored;\\n        uint256 lastUpdateTime;\\n        mapping(address => UserDeposit) stakingBalances;\\n    }\\n\\n    mapping(address => StakingToken) public stakingTokens;\\n\\n    modifier onlyEnabled(address stakedToken) {\\n        require(stakingTokens[stakedToken].enabled, \\\"stakedToken not enabled\\\");\\n        _;\\n    }\\n\\n    modifier onlyInitialized(address stakedToken) {\\n        require(stakingTokens[stakedToken].lastUpdateTime != 0, \\\"stakedToken not initialized\\\");\\n        _;\\n    }\\n\\n    constructor(address _rewardToken) {\\n        rewardToken = IERC20(_rewardToken);\\n    }\\n\\n    function getCurrentTime() public view virtual returns (uint256) {\\n        return block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /**************************************\\n     *               EVENTS               *\\n     **************************************/\\n\\n    event TokenConfiguredForStaking(\\n        address indexed token,\\n        bool enabled,\\n        uint256 baseEmissionRate,\\n        uint256 maxMultiplier,\\n        uint256 secondsToMaxMultiplier,\\n        uint256 lastUpdateTime\\n    );\\n    event RecoverToken(address indexed token, uint256 amount);\\n    event Stake(\\n        address indexed token,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 averageDepositTime,\\n        uint256 cumulativeBalance,\\n        uint256 tokenCumulativeStaked\\n    );\\n    event Unstake(\\n        address indexed token,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 remainingCumulativeBalance,\\n        uint256 tokenCumulativeStaked\\n    );\\n    event RewardsWithdrawn(\\n        address indexed token,\\n        address indexed user,\\n        uint256 rewardsToSend,\\n        uint256 tokenLastUpdateTime,\\n        uint256 tokenRewardPerTokenStored,\\n        uint256 userRewardsOutstanding,\\n        uint256 userRewardsPaidPerToken\\n    );\\n    event Exit(address indexed token, address indexed user, uint256 tokenCumulativeStaked);\\n\\n    /**************************************\\n     *          ADMIN FUNCTIONS           *\\n     **************************************/\\n\\n    /**\\n     * @notice Enable a token for staking.\\n     * @dev The owner should ensure that the token enabled is a standard ERC20 token to ensure correct functionality.\\n     * @param stakedToken The address of the token that can be staked.\\n     * @param enabled Whether the token is enabled for staking.\\n     * @param baseEmissionRate The base emission rate for staking the token. This is split pro-rata between all users.\\n     * @param maxMultiplier The maximum multiplier for staking which increases your rewards the longer you stake.\\n     * @param secondsToMaxMultiplier The number of seconds needed to stake to reach the maximum multiplier.\\n     */\\n    function configureStakingToken(\\n        address stakedToken,\\n        bool enabled,\\n        uint256 baseEmissionRate,\\n        uint256 maxMultiplier,\\n        uint256 secondsToMaxMultiplier\\n    ) external onlyOwner {\\n        // Validate input to ensure system stability and avoid unexpected behavior. Note we dont place a lower bound on\\n        // the baseEmissionRate. If this value is less than 1e18 then you will slowly loose your staking rewards over time.\\n        // Because of the way balances are managed, the staked token cannot be the reward token. Otherwise, reward\\n        // payouts could eat into user balances. We choose not to constrain `maxMultiplier` to be > 1e18 so that\\n        // admin can choose to allow decreasing emissions over time. This is not the intended use case, but we see no\\n        // benefit to removing this additional flexibility. If set < 1e18, then user's rewards outstanding will\\n        // decrease over time. Incentives for stakers would look different if `maxMultiplier` were set < 1e18\\n        require(stakedToken != address(rewardToken), \\\"Staked token is reward token\\\");\\n        require(maxMultiplier < 1e36, \\\"maxMultiplier can not be set too large\\\");\\n        require(secondsToMaxMultiplier > 0, \\\"secondsToMaxMultiplier must be greater than 0\\\");\\n        require(baseEmissionRate < 1e27, \\\"baseEmissionRate can not be set too large\\\");\\n\\n        StakingToken storage stakingToken = stakingTokens[stakedToken];\\n\\n        // If this token is already initialized, make sure we update the rewards before modifying any params.\\n        if (stakingToken.lastUpdateTime != 0) _updateReward(stakedToken, address(0));\\n\\n        stakingToken.enabled = enabled;\\n        stakingToken.baseEmissionRate = baseEmissionRate;\\n        stakingToken.maxMultiplier = maxMultiplier;\\n        stakingToken.secondsToMaxMultiplier = secondsToMaxMultiplier;\\n        stakingToken.lastUpdateTime = getCurrentTime();\\n\\n        emit TokenConfiguredForStaking(\\n            stakedToken,\\n            enabled,\\n            baseEmissionRate,\\n            maxMultiplier,\\n            secondsToMaxMultiplier,\\n            stakingToken.lastUpdateTime\\n        );\\n    }\\n\\n    /**\\n     * @notice Enables the owner to recover tokens dropped onto the contract. This could be used to remove unclaimed\\n     * staking rewards or recover excess LP tokens that were inadvertently dropped onto the contract. Importantly, the\\n     * contract will only let the owner recover staked excess tokens above what the contract thinks it should have. i.e\\n     * the owner cant use this method to steal staked tokens, only recover excess ones mistakenly sent to the contract.\\n     * @param token The address of the token to skim.\\n     */\\n    function recoverToken(address token) external onlyOwner {\\n        // If the token is an enabled staking token then we want to preform a skim action where we send back any extra\\n        // tokens that are not accounted for in the cumulativeStaked variable. This lets the owner recover extra tokens\\n        // sent to the contract that were not explicitly staked. if the token is not enabled for staking then we simply\\n        // send back the full amount of tokens that the contract has.\\n        uint256 amount = IERC20(token).balanceOf(address(this));\\n        if (stakingTokens[token].lastUpdateTime != 0) amount -= stakingTokens[token].cumulativeStaked;\\n        require(amount > 0, \\\"Can't recover 0 tokens\\\");\\n        IERC20(token).safeTransfer(owner(), amount);\\n        emit RecoverToken(token, amount);\\n    }\\n\\n    /**************************************\\n     *          STAKER FUNCTIONS          *\\n     **************************************/\\n\\n    /**\\n     * @notice Stake tokens for rewards.\\n     * @dev The caller of this function must approve this contract to spend amount of stakedToken.\\n     * @param stakedToken The address of the token to stake.\\n     * @param amount The amount of the token to stake.\\n     */\\n    function stake(address stakedToken, uint256 amount) external nonReentrant onlyEnabled(stakedToken) {\\n        _stake(stakedToken, amount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Stake tokens for rewards on behalf of `beneficiary`.\\n     * @dev The caller of this function must approve this contract to spend amount of stakedToken.\\n     * @dev The caller of this function is effectively donating their tokens to the beneficiary. The beneficiary\\n     * can then unstake or claim rewards as they wish.\\n     * @param stakedToken The address of the token to stake.\\n     * @param amount The amount of the token to stake.\\n     * @param beneficiary User that caller wants to stake on behalf of.\\n     */\\n    function stakeFor(\\n        address stakedToken,\\n        uint256 amount,\\n        address beneficiary\\n    ) external nonReentrant onlyEnabled(stakedToken) {\\n        _stake(stakedToken, amount, beneficiary);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens.\\n     * @param stakedToken The address of the token to withdraw.\\n     * @param amount The amount of the token to withdraw.\\n     */\\n    function unstake(address stakedToken, uint256 amount) public nonReentrant onlyInitialized(stakedToken) {\\n        _updateReward(stakedToken, msg.sender);\\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[msg.sender];\\n\\n        // Note: these will revert if underflow so you cant unstake more than your cumulativeBalance.\\n        userDeposit.cumulativeBalance -= amount;\\n        stakingTokens[stakedToken].cumulativeStaked -= amount;\\n\\n        IERC20(stakedToken).safeTransfer(msg.sender, amount);\\n\\n        emit Unstake(\\n            stakedToken,\\n            msg.sender,\\n            amount,\\n            userDeposit.cumulativeBalance,\\n            stakingTokens[stakedToken].cumulativeStaked\\n        );\\n    }\\n\\n    /**\\n     * @notice Get entitled rewards for the staker.\\n     * @dev Calling this method will reset the caller's reward multiplier.\\n     * @param stakedToken The address of the token to get rewards for.\\n     */\\n    function withdrawReward(address stakedToken) public nonReentrant onlyInitialized(stakedToken) {\\n        _updateReward(stakedToken, msg.sender);\\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[msg.sender];\\n\\n        uint256 rewardsToSend = userDeposit.rewardsOutstanding;\\n        if (rewardsToSend > 0) {\\n            userDeposit.rewardsOutstanding = 0;\\n            userDeposit.averageDepositTime = getCurrentTime();\\n            rewardToken.safeTransfer(msg.sender, rewardsToSend);\\n        }\\n\\n        emit RewardsWithdrawn(\\n            stakedToken,\\n            msg.sender,\\n            rewardsToSend,\\n            stakingTokens[stakedToken].lastUpdateTime,\\n            stakingTokens[stakedToken].rewardPerTokenStored,\\n            userDeposit.rewardsOutstanding,\\n            userDeposit.rewardsAccumulatedPerToken\\n        );\\n    }\\n\\n    /**\\n     * @notice Exits a staking position by unstaking and getting rewards. This totally exits the staking position.\\n     * @dev Calling this method will reset the caller's reward multiplier.\\n     * @param stakedToken The address of the token to get rewards for.\\n     */\\n    function exit(address stakedToken) external onlyInitialized(stakedToken) {\\n        _updateReward(stakedToken, msg.sender);\\n        unstake(stakedToken, stakingTokens[stakedToken].stakingBalances[msg.sender].cumulativeBalance);\\n        withdrawReward(stakedToken);\\n\\n        emit Exit(stakedToken, msg.sender, stakingTokens[stakedToken].cumulativeStaked);\\n    }\\n\\n    /**************************************\\n     *           VIEW FUNCTIONS           *\\n     **************************************/\\n\\n    /**\\n     * @notice Returns the total staked for a given stakedToken.\\n     * @param stakedToken The address of the staked token to query.\\n     * @return uint256 Total amount staked of the stakedToken.\\n     */\\n    function getCumulativeStaked(address stakedToken) external view returns (uint256) {\\n        return stakingTokens[stakedToken].cumulativeStaked;\\n    }\\n\\n    /**\\n     * @notice Returns all the information associated with a user's stake.\\n     * @param stakedToken The address of the staked token to query.\\n     * @param account The address of user to query.\\n     * @return UserDeposit Struct with: {cumulativeBalance,averageDepositTime,rewardsAccumulatedPerToken,rewardsOutstanding}\\n     */\\n    function getUserStake(address stakedToken, address account) external view returns (UserDeposit memory) {\\n        return stakingTokens[stakedToken].stakingBalances[account];\\n    }\\n\\n    /**\\n     * @notice Returns the base rewards per staked token for a given staking token. This factors in the last time\\n     * any internal logic was called on this contract to correctly attribute retroactive cumulative rewards.\\n     * @dev the value returned is represented by a uint256 with fixed precision of 18 decimals.\\n     * @param stakedToken The address of the staked token to query.\\n     * @return uint256 Total base reward per token that will be applied, pro-rata, to stakers.\\n     */\\n    function baseRewardPerToken(address stakedToken) public view returns (uint256) {\\n        StakingToken storage stakingToken = stakingTokens[stakedToken];\\n        if (stakingToken.cumulativeStaked == 0) return stakingToken.rewardPerTokenStored;\\n\\n        return\\n            stakingToken.rewardPerTokenStored +\\n            ((getCurrentTime() - stakingToken.lastUpdateTime) * stakingToken.baseEmissionRate * 1e18) /\\n            stakingToken.cumulativeStaked;\\n    }\\n\\n    /**\\n     * @notice Returns the multiplier applied to the base reward per staked token for a given staking token and account.\\n     * The longer a user stakes the higher their multiplier up to maxMultiplier for that given staking token.\\n     * any internal logic was called on this contract to correctly attribute retroactive cumulative rewards.\\n     * @dev the value returned is represented by a uint256 with fixed precision of 18 decimals.\\n     * @param stakedToken The address of the staked token to query.\\n     * @param account The address of the user to query.\\n     * @return uint256 User multiplier, applied to the baseRewardPerToken, when claiming rewards.\\n     */\\n    function getUserRewardMultiplier(address stakedToken, address account) public view returns (uint256) {\\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[account];\\n        if (userDeposit.averageDepositTime == 0 || userDeposit.cumulativeBalance == 0) return 1e18;\\n        uint256 fractionOfMaxMultiplier = ((getTimeSinceAverageDeposit(stakedToken, account)) * 1e18) /\\n            stakingTokens[stakedToken].secondsToMaxMultiplier;\\n\\n        // At maximum, the multiplier should be equal to the maxMultiplier.\\n        if (fractionOfMaxMultiplier > 1e18) fractionOfMaxMultiplier = 1e18;\\n        return 1e18 + (fractionOfMaxMultiplier * (stakingTokens[stakedToken].maxMultiplier - 1e18)) / (1e18);\\n    }\\n\\n    /**\\n     * @notice Returns the total outstanding rewards entitled to a user for a given staking token. This factors in the\\n     * users staking duration (and therefore reward multiplier) and their pro-rata share of the total rewards.\\n     * @param stakedToken The address of the staked token to query.\\n     * @param account The address of the user to query.\\n     * @return uint256 Total outstanding rewards entitled to user.\\n     */\\n    function getOutstandingRewards(address stakedToken, address account) public view returns (uint256) {\\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[account];\\n\\n        uint256 userRewardMultiplier = getUserRewardMultiplier(stakedToken, account);\\n\\n        uint256 newUserRewards = (userDeposit.cumulativeBalance *\\n            (baseRewardPerToken(stakedToken) - userDeposit.rewardsAccumulatedPerToken) *\\n            userRewardMultiplier) / (1e18 * 1e18);\\n\\n        return newUserRewards + userDeposit.rewardsOutstanding;\\n    }\\n\\n    /**\\n     * @notice Returns the time that has elapsed between the current time and the last users average deposit time.\\n     * @param stakedToken The address of the staked token to query.\\n     * @param account The address of the user to query.\\n     *@return uint256 Time, in seconds, between the users average deposit time and the current time.\\n     */\\n    function getTimeSinceAverageDeposit(address stakedToken, address account) public view returns (uint256) {\\n        return getCurrentTime() - stakingTokens[stakedToken].stakingBalances[account].averageDepositTime;\\n    }\\n\\n    /**\\n     * @notice Returns a users new average deposit time, considering the addition of a new deposit. This factors in the\\n     * cumulative previous deposits, new deposit and time from the last deposit.\\n     * @param stakedToken The address of the staked token to query.\\n     * @param account The address of the user to query.\\n     * @return uint256 Average post deposit time, considering all deposits to date.\\n     */\\n    function getAverageDepositTimePostDeposit(\\n        address stakedToken,\\n        address account,\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[account];\\n        if (amount == 0) return userDeposit.averageDepositTime;\\n        uint256 amountWeightedTime = (((amount * 1e18) / (userDeposit.cumulativeBalance + amount)) *\\n            (getTimeSinceAverageDeposit(stakedToken, account))) / 1e18;\\n        return userDeposit.averageDepositTime + amountWeightedTime;\\n    }\\n\\n    /**************************************\\n     *         INTERNAL FUNCTIONS         *\\n     **************************************/\\n\\n    // Update the internal counters for a given stakedToken and user.\\n    function _updateReward(address stakedToken, address account) internal {\\n        StakingToken storage stakingToken = stakingTokens[stakedToken];\\n        stakingToken.rewardPerTokenStored = baseRewardPerToken(stakedToken);\\n        stakingToken.lastUpdateTime = getCurrentTime();\\n        if (account != address(0)) {\\n            UserDeposit storage userDeposit = stakingToken.stakingBalances[account];\\n            userDeposit.rewardsOutstanding = getOutstandingRewards(stakedToken, account);\\n            userDeposit.rewardsAccumulatedPerToken = stakingToken.rewardPerTokenStored;\\n        }\\n    }\\n\\n    function _stake(\\n        address stakedToken,\\n        uint256 amount,\\n        address staker\\n    ) internal {\\n        _updateReward(stakedToken, staker);\\n\\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[staker];\\n\\n        uint256 averageDepositTime = getAverageDepositTimePostDeposit(stakedToken, staker, amount);\\n\\n        userDeposit.averageDepositTime = averageDepositTime;\\n        userDeposit.cumulativeBalance += amount;\\n        stakingTokens[stakedToken].cumulativeStaked += amount;\\n\\n        IERC20(stakedToken).safeTransferFrom(msg.sender, address(this), amount);\\n        emit Stake(\\n            stakedToken,\\n            staker,\\n            amount,\\n            averageDepositTime,\\n            userDeposit.cumulativeBalance,\\n            stakingTokens[stakedToken].cumulativeStaked\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xbc67be1719f5719497d5afe7a039bdcabe0a1af453e6dec683dc5a312df047de\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620025f9380380620025f98339810160408190526200003491620000a8565b6001600055620000443362000056565b6001600160a01b0316608052620000da565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208284031215620000bb57600080fd5b81516001600160a01b0381168114620000d357600080fd5b9392505050565b6080516124f562000104600039600081816103ff01528181611028015261131b01526124f56000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80638da5cb5b116100d8578063b42652e91161008c578063d8f8083f11610066578063d8f8083f146103d4578063f2fde38b146103e7578063f7c618c1146103fa57600080fd5b8063b42652e91461039b578063b86e321c146103ae578063c2a672e0146103c157600080fd5b80639be65a60116100bd5780639be65a6014610355578063ac9650d814610368578063adc9772e1461038857600080fd5b80638da5cb5b146103035780639b8f04b71461034257600080fd5b806342129a501161012f5780636616af07116101145780636616af07146102ad578063715018a6146102e65780637229d982146102f057600080fd5b806342129a501461021457806348a94dc91461029a57600080fd5b806329cb924d1161016057806329cb924d146101b55780632bfb323f146101bb5780633710d4c7146101ce57600080fd5b80630700f7a11461017c5780630f86107c146101a2575b600080fd5b61018f61018a366004611fda565b610421565b6040519081526020015b60405180910390f35b61018f6101b036600461200d565b610470565b4261018f565b61018f6101c9366004611fda565b61052a565b6101e16101dc366004611fda565b6105d6565b60405161019991908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b610263610222366004612049565b6002602081905260009182526040909120805460018201549282015460038301546004840154600585015460069095015460ff909416959492939192909187565b6040805197151588526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610199565b61018f6102a8366004612049565b61066d565b61018f6102bb366004612049565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090206004015490565b6102ee6106f5565b005b61018f6102fe366004611fda565b610709565b60015473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610199565b6102ee610350366004612064565b610841565b6102ee610363366004612049565b61095e565b61037b6103763660046120a0565b610b5c565b6040516101999190612183565b6102ee610396366004612203565b610c51565b6102ee6103a9366004612049565b610d68565b6102ee6103bc366004612049565b610eb6565b6102ee6103cf366004612203565b6110eb565b6102ee6103e236600461223b565b611311565b6102ee6103f5366004612049565b61168a565b61031d7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff82811660009081526002602090815260408083209385168352600790930190529081206001015461046790426122b9565b90505b92915050565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526002602090815260408083209386168352600790930190529081208282036104ba57600101549050610523565b6000670de0b6b3a76400006104cf8787610421565b83546104dc9087906122cc565b6104ee87670de0b6b3a76400006122df565b6104f891906122f6565b61050291906122df565b61050c91906122f6565b905080826001015461051e91906122cc565b925050505b9392505050565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526002602090815260408083209385168352600790930190529081208161056d8585610709565b905060006ec097ce7bc90715b34b9f10000000008284600201546105908961066d565b61059a91906122b9565b85546105a691906122df565b6105b091906122df565b6105ba91906122f6565b90508260030154816105cc91906122cc565b9695505050505050565b6106016040518060800160405280600081526020016000815260200160008152602001600081525090565b5073ffffffffffffffffffffffffffffffffffffffff918216600090815260026020818152604080842094909516835260079093018352908390208351608081018552815481526001820154938101939093529081015492820192909252600390910154606082015290565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600260205260408120600481015482036106a7576005015492915050565b6004810154600182015460068301546106c090426122b9565b6106ca91906122df565b6106dc90670de0b6b3a76400006122df565b6106e691906122f6565b816005015461052391906122cc565b6106fd611741565b61070760006117c2565b565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526002602090815260408083209385168352600790930190529081206001810154158061075157508054155b1561076757670de0b6b3a764000091505061046a565b73ffffffffffffffffffffffffffffffffffffffff841660009081526002602052604081206003015461079a8686610421565b6107ac90670de0b6b3a76400006122df565b6107b691906122f6565b9050670de0b6b3a76400008111156107d35750670de0b6b3a76400005b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602081905260409091200154670de0b6b3a7640000906108129082906122b9565b61081c90836122df565b61082691906122f6565b61083890670de0b6b3a76400006122cc565b95945050505050565b6002600054036108b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600081815573ffffffffffffffffffffffffffffffffffffffff851681526020919091526040902054839060ff16610948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7374616b6564546f6b656e206e6f7420656e61626c656400000000000000000060448201526064016108a9565b610953848484611839565b505060016000555050565b610966611741565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f79190612331565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604090206006015490915015610a5e5773ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040902060040154610a5b90826122b9565b90505b60008111610ac8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f43616e2774207265636f766572203020746f6b656e730000000000000000000060448201526064016108a9565b610b08610aea60015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8416908361198a565b8173ffffffffffffffffffffffffffffffffffffffff167ffba2d3bdfb2d601eb66a89783a2c614856101cadce71556753c2edadd60c831c82604051610b5091815260200190565b60405180910390a25050565b60608167ffffffffffffffff811115610b7757610b7761234a565b604051908082528060200260200182016040528015610baa57816020015b6060815260200190600190039081610b955790505b50905060005b82811015610c4a57610c1a30858584818110610bce57610bce612379565b9050602002810190610be091906123a8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a6392505050565b828281518110610c2c57610c2c612379565b60200260200101819052508080610c4290612414565b915050610bb0565b5092915050565b600260005403610cbd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108a9565b6002600081815573ffffffffffffffffffffffffffffffffffffffff841681526020919091526040902054829060ff16610d53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7374616b6564546f6b656e206e6f7420656e61626c656400000000000000000060448201526064016108a9565b610d5e838333611839565b5050600160005550565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812060060154829103610dfa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f7374616b6564546f6b656e206e6f7420696e697469616c697a6564000000000060448201526064016108a9565b610e048233611a88565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600260209081526040808320338452600701909152902054610e439083906110eb565b610e4c82610eb6565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260026020526040908190206004015490513392917fbc2a67d422c268da6fe45f3e7d194e1d98906d221f1cfad62a5c80f2cd209f4c91610eaa91815260200190565b60405180910390a35050565b600260005403610f22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108a9565b6002600081815573ffffffffffffffffffffffffffffffffffffffff831681526020919091526040812060060154829103610fb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f7374616b6564546f6b656e206e6f7420696e697469616c697a6564000000000060448201526064016108a9565b610fc38233611a88565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020908152604080832033845260070190915290206003810154801561104f576000600383015542600183015561104f73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016338361198a565b73ffffffffffffffffffffffffffffffffffffffff8416600081815260026020818152604092839020600681015460059091015460038801549388015485518881529384019290925293820193909352606081019190915260808101919091523391907f72d2511ac7dd6d1171d9b798c2662417660eb70235ed1b47dfe9a015929cdf409060a0015b60405180910390a3505060016000555050565b600260005403611157576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108a9565b6002600081815573ffffffffffffffffffffffffffffffffffffffff8416815260209190915260408120600601548391036111ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f7374616b6564546f6b656e206e6f7420696e697469616c697a6564000000000060448201526064016108a9565b6111f88333611a88565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260209081526040808320338452600701909152812080549091849183919061123f9084906122b9565b909155505073ffffffffffffffffffffffffffffffffffffffff84166000908152600260205260408120600401805485929061127c9084906122b9565b909155506112a3905073ffffffffffffffffffffffffffffffffffffffff8516338561198a565b805473ffffffffffffffffffffffffffffffffffffffff8516600081815260026020908152604091829020600401548251888152918201949094529081019290925233917ffe7007b2e89d80edda76299251df08366480cac22e5e260f5e662e850b1f7a32906060016110d8565b611319611741565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036113ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5374616b656420746f6b656e2069732072657761726420746f6b656e0000000060448201526064016108a9565b6ec097ce7bc90715b34b9f1000000000821061146c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6d61784d756c7469706c6965722063616e206e6f742062652073657420746f6f60448201527f206c61726765000000000000000000000000000000000000000000000000000060648201526084016108a9565b600081116114fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f7365636f6e6473546f4d61784d756c7469706c696572206d757374206265206760448201527f726561746572207468616e20300000000000000000000000000000000000000060648201526084016108a9565b6b033b2e3c9fd0803ce80000008310611597576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f62617365456d697373696f6e526174652063616e206e6f74206265207365742060448201527f746f6f206c61726765000000000000000000000000000000000000000000000060648201526084016108a9565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602052604090206006810154156115d1576115d1866000611a88565b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151517815560018101849055600281018390556003810182905542600682018190556040805187151581526020810187905290810185905260608101849052608081019190915273ffffffffffffffffffffffffffffffffffffffff8716907fdf80da729e79c8aa520a27834205fd35a54135f495b79561e19bd67166250a079060a00160405180910390a2505050505050565b611692611741565b73ffffffffffffffffffffffffffffffffffffffff8116611735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108a9565b61173e816117c2565b50565b60015473ffffffffffffffffffffffffffffffffffffffff163314610707576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a9565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6118438382611a88565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260026020908152604080832093851683526007909301905290812090611887858486610470565b9050808260010181905550838260000160008282546118a691906122cc565b909155505073ffffffffffffffffffffffffffffffffffffffff8516600090815260026020526040812060040180548692906118e39084906122cc565b9091555061190b905073ffffffffffffffffffffffffffffffffffffffff8616333087611b23565b815473ffffffffffffffffffffffffffffffffffffffff8681166000818152600260209081526040918290206004015482518a8152918201879052918101949094526060840152908516917f249b692ff3a1553daecb2b56a807466cab98a0acdca470f0d18c1064e89b57329060800160405180910390a35050505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611a5e9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611b87565b505050565b6060610467838360405180606001604052806027815260200161249960279139611c93565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260409020611ab68361066d565b600582015542600682015573ffffffffffffffffffffffffffffffffffffffff821615611a5e5773ffffffffffffffffffffffffffffffffffffffff821660009081526007820160205260409020611b0e848461052a565b60038201556005820154600290910155505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052611b819085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016119dc565b50505050565b6000611be9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611db19092919063ffffffff16565b805190915015611a5e5780806020019051810190611c07919061244c565b611a5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016108a9565b606073ffffffffffffffffffffffffffffffffffffffff84163b611d39576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016108a9565b6000808573ffffffffffffffffffffffffffffffffffffffff1685604051611d619190612469565b600060405180830381855af49150503d8060008114611d9c576040519150601f19603f3d011682016040523d82523d6000602084013e611da1565b606091505b509150915061051e828286611dc8565b6060611dc08484600085611e1b565b949350505050565b60608315611dd7575081610523565b825115611de75782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a99190612485565b606082471015611ead576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016108a9565b73ffffffffffffffffffffffffffffffffffffffff85163b611f2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108a9565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611f549190612469565b60006040518083038185875af1925050503d8060008114611f91576040519150601f19603f3d011682016040523d82523d6000602084013e611f96565b606091505b5091509150611fa6828286611dc8565b979650505050505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611fd557600080fd5b919050565b60008060408385031215611fed57600080fd5b611ff683611fb1565b915061200460208401611fb1565b90509250929050565b60008060006060848603121561202257600080fd5b61202b84611fb1565b925061203960208501611fb1565b9150604084013590509250925092565b60006020828403121561205b57600080fd5b61046782611fb1565b60008060006060848603121561207957600080fd5b61208284611fb1565b92506020840135915061209760408501611fb1565b90509250925092565b600080602083850312156120b357600080fd5b823567ffffffffffffffff808211156120cb57600080fd5b818501915085601f8301126120df57600080fd5b8135818111156120ee57600080fd5b8660208260051b850101111561210357600080fd5b60209290920196919550909350505050565b60005b83811015612130578181015183820152602001612118565b50506000910152565b60008151808452612151816020860160208601612115565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156121f6577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526121e4858351612139565b945092850192908501906001016121aa565b5092979650505050505050565b6000806040838503121561221657600080fd5b61221f83611fb1565b946020939093013593505050565b801515811461173e57600080fd5b600080600080600060a0868803121561225357600080fd5b61225c86611fb1565b9450602086013561226c8161222d565b94979496505050506040830135926060810135926080909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561046a5761046a61228a565b8082018082111561046a5761046a61228a565b808202811582820484141761046a5761046a61228a565b60008261232c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561234357600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126123dd57600080fd5b83018035915067ffffffffffffffff8211156123f857600080fd5b60200191503681900382131561240d57600080fd5b9250929050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124455761244561228a565b5060010190565b60006020828403121561245e57600080fd5b81516105238161222d565b6000825161247b818460208701612115565b9190910192915050565b602081526000610467602083018461213956fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122058279542ff02b69f397882804650d6aba2916365bc7a2e34a5b6c3ee54ecfa2964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80638da5cb5b116100d8578063b42652e91161008c578063d8f8083f11610066578063d8f8083f146103d4578063f2fde38b146103e7578063f7c618c1146103fa57600080fd5b8063b42652e91461039b578063b86e321c146103ae578063c2a672e0146103c157600080fd5b80639be65a60116100bd5780639be65a6014610355578063ac9650d814610368578063adc9772e1461038857600080fd5b80638da5cb5b146103035780639b8f04b71461034257600080fd5b806342129a501161012f5780636616af07116101145780636616af07146102ad578063715018a6146102e65780637229d982146102f057600080fd5b806342129a501461021457806348a94dc91461029a57600080fd5b806329cb924d1161016057806329cb924d146101b55780632bfb323f146101bb5780633710d4c7146101ce57600080fd5b80630700f7a11461017c5780630f86107c146101a2575b600080fd5b61018f61018a366004611fda565b610421565b6040519081526020015b60405180910390f35b61018f6101b036600461200d565b610470565b4261018f565b61018f6101c9366004611fda565b61052a565b6101e16101dc366004611fda565b6105d6565b60405161019991908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b610263610222366004612049565b6002602081905260009182526040909120805460018201549282015460038301546004840154600585015460069095015460ff909416959492939192909187565b6040805197151588526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610199565b61018f6102a8366004612049565b61066d565b61018f6102bb366004612049565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090206004015490565b6102ee6106f5565b005b61018f6102fe366004611fda565b610709565b60015473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610199565b6102ee610350366004612064565b610841565b6102ee610363366004612049565b61095e565b61037b6103763660046120a0565b610b5c565b6040516101999190612183565b6102ee610396366004612203565b610c51565b6102ee6103a9366004612049565b610d68565b6102ee6103bc366004612049565b610eb6565b6102ee6103cf366004612203565b6110eb565b6102ee6103e236600461223b565b611311565b6102ee6103f5366004612049565b61168a565b61031d7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff82811660009081526002602090815260408083209385168352600790930190529081206001015461046790426122b9565b90505b92915050565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526002602090815260408083209386168352600790930190529081208282036104ba57600101549050610523565b6000670de0b6b3a76400006104cf8787610421565b83546104dc9087906122cc565b6104ee87670de0b6b3a76400006122df565b6104f891906122f6565b61050291906122df565b61050c91906122f6565b905080826001015461051e91906122cc565b925050505b9392505050565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526002602090815260408083209385168352600790930190529081208161056d8585610709565b905060006ec097ce7bc90715b34b9f10000000008284600201546105908961066d565b61059a91906122b9565b85546105a691906122df565b6105b091906122df565b6105ba91906122f6565b90508260030154816105cc91906122cc565b9695505050505050565b6106016040518060800160405280600081526020016000815260200160008152602001600081525090565b5073ffffffffffffffffffffffffffffffffffffffff918216600090815260026020818152604080842094909516835260079093018352908390208351608081018552815481526001820154938101939093529081015492820192909252600390910154606082015290565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600260205260408120600481015482036106a7576005015492915050565b6004810154600182015460068301546106c090426122b9565b6106ca91906122df565b6106dc90670de0b6b3a76400006122df565b6106e691906122f6565b816005015461052391906122cc565b6106fd611741565b61070760006117c2565b565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526002602090815260408083209385168352600790930190529081206001810154158061075157508054155b1561076757670de0b6b3a764000091505061046a565b73ffffffffffffffffffffffffffffffffffffffff841660009081526002602052604081206003015461079a8686610421565b6107ac90670de0b6b3a76400006122df565b6107b691906122f6565b9050670de0b6b3a76400008111156107d35750670de0b6b3a76400005b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602081905260409091200154670de0b6b3a7640000906108129082906122b9565b61081c90836122df565b61082691906122f6565b61083890670de0b6b3a76400006122cc565b95945050505050565b6002600054036108b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600081815573ffffffffffffffffffffffffffffffffffffffff851681526020919091526040902054839060ff16610948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7374616b6564546f6b656e206e6f7420656e61626c656400000000000000000060448201526064016108a9565b610953848484611839565b505060016000555050565b610966611741565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f79190612331565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604090206006015490915015610a5e5773ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040902060040154610a5b90826122b9565b90505b60008111610ac8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f43616e2774207265636f766572203020746f6b656e730000000000000000000060448201526064016108a9565b610b08610aea60015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8416908361198a565b8173ffffffffffffffffffffffffffffffffffffffff167ffba2d3bdfb2d601eb66a89783a2c614856101cadce71556753c2edadd60c831c82604051610b5091815260200190565b60405180910390a25050565b60608167ffffffffffffffff811115610b7757610b7761234a565b604051908082528060200260200182016040528015610baa57816020015b6060815260200190600190039081610b955790505b50905060005b82811015610c4a57610c1a30858584818110610bce57610bce612379565b9050602002810190610be091906123a8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a6392505050565b828281518110610c2c57610c2c612379565b60200260200101819052508080610c4290612414565b915050610bb0565b5092915050565b600260005403610cbd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108a9565b6002600081815573ffffffffffffffffffffffffffffffffffffffff841681526020919091526040902054829060ff16610d53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7374616b6564546f6b656e206e6f7420656e61626c656400000000000000000060448201526064016108a9565b610d5e838333611839565b5050600160005550565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812060060154829103610dfa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f7374616b6564546f6b656e206e6f7420696e697469616c697a6564000000000060448201526064016108a9565b610e048233611a88565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600260209081526040808320338452600701909152902054610e439083906110eb565b610e4c82610eb6565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260026020526040908190206004015490513392917fbc2a67d422c268da6fe45f3e7d194e1d98906d221f1cfad62a5c80f2cd209f4c91610eaa91815260200190565b60405180910390a35050565b600260005403610f22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108a9565b6002600081815573ffffffffffffffffffffffffffffffffffffffff831681526020919091526040812060060154829103610fb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f7374616b6564546f6b656e206e6f7420696e697469616c697a6564000000000060448201526064016108a9565b610fc38233611a88565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020908152604080832033845260070190915290206003810154801561104f576000600383015542600183015561104f73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016338361198a565b73ffffffffffffffffffffffffffffffffffffffff8416600081815260026020818152604092839020600681015460059091015460038801549388015485518881529384019290925293820193909352606081019190915260808101919091523391907f72d2511ac7dd6d1171d9b798c2662417660eb70235ed1b47dfe9a015929cdf409060a0015b60405180910390a3505060016000555050565b600260005403611157576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108a9565b6002600081815573ffffffffffffffffffffffffffffffffffffffff8416815260209190915260408120600601548391036111ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f7374616b6564546f6b656e206e6f7420696e697469616c697a6564000000000060448201526064016108a9565b6111f88333611a88565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260209081526040808320338452600701909152812080549091849183919061123f9084906122b9565b909155505073ffffffffffffffffffffffffffffffffffffffff84166000908152600260205260408120600401805485929061127c9084906122b9565b909155506112a3905073ffffffffffffffffffffffffffffffffffffffff8516338561198a565b805473ffffffffffffffffffffffffffffffffffffffff8516600081815260026020908152604091829020600401548251888152918201949094529081019290925233917ffe7007b2e89d80edda76299251df08366480cac22e5e260f5e662e850b1f7a32906060016110d8565b611319611741565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036113ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5374616b656420746f6b656e2069732072657761726420746f6b656e0000000060448201526064016108a9565b6ec097ce7bc90715b34b9f1000000000821061146c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6d61784d756c7469706c6965722063616e206e6f742062652073657420746f6f60448201527f206c61726765000000000000000000000000000000000000000000000000000060648201526084016108a9565b600081116114fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f7365636f6e6473546f4d61784d756c7469706c696572206d757374206265206760448201527f726561746572207468616e20300000000000000000000000000000000000000060648201526084016108a9565b6b033b2e3c9fd0803ce80000008310611597576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f62617365456d697373696f6e526174652063616e206e6f74206265207365742060448201527f746f6f206c61726765000000000000000000000000000000000000000000000060648201526084016108a9565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602052604090206006810154156115d1576115d1866000611a88565b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151517815560018101849055600281018390556003810182905542600682018190556040805187151581526020810187905290810185905260608101849052608081019190915273ffffffffffffffffffffffffffffffffffffffff8716907fdf80da729e79c8aa520a27834205fd35a54135f495b79561e19bd67166250a079060a00160405180910390a2505050505050565b611692611741565b73ffffffffffffffffffffffffffffffffffffffff8116611735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108a9565b61173e816117c2565b50565b60015473ffffffffffffffffffffffffffffffffffffffff163314610707576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a9565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6118438382611a88565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260026020908152604080832093851683526007909301905290812090611887858486610470565b9050808260010181905550838260000160008282546118a691906122cc565b909155505073ffffffffffffffffffffffffffffffffffffffff8516600090815260026020526040812060040180548692906118e39084906122cc565b9091555061190b905073ffffffffffffffffffffffffffffffffffffffff8616333087611b23565b815473ffffffffffffffffffffffffffffffffffffffff8681166000818152600260209081526040918290206004015482518a8152918201879052918101949094526060840152908516917f249b692ff3a1553daecb2b56a807466cab98a0acdca470f0d18c1064e89b57329060800160405180910390a35050505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611a5e9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611b87565b505050565b6060610467838360405180606001604052806027815260200161249960279139611c93565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260409020611ab68361066d565b600582015542600682015573ffffffffffffffffffffffffffffffffffffffff821615611a5e5773ffffffffffffffffffffffffffffffffffffffff821660009081526007820160205260409020611b0e848461052a565b60038201556005820154600290910155505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052611b819085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016119dc565b50505050565b6000611be9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611db19092919063ffffffff16565b805190915015611a5e5780806020019051810190611c07919061244c565b611a5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016108a9565b606073ffffffffffffffffffffffffffffffffffffffff84163b611d39576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016108a9565b6000808573ffffffffffffffffffffffffffffffffffffffff1685604051611d619190612469565b600060405180830381855af49150503d8060008114611d9c576040519150601f19603f3d011682016040523d82523d6000602084013e611da1565b606091505b509150915061051e828286611dc8565b6060611dc08484600085611e1b565b949350505050565b60608315611dd7575081610523565b825115611de75782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a99190612485565b606082471015611ead576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016108a9565b73ffffffffffffffffffffffffffffffffffffffff85163b611f2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108a9565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611f549190612469565b60006040518083038185875af1925050503d8060008114611f91576040519150601f19603f3d011682016040523d82523d6000602084013e611f96565b606091505b5091509150611fa6828286611dc8565b979650505050505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611fd557600080fd5b919050565b60008060408385031215611fed57600080fd5b611ff683611fb1565b915061200460208401611fb1565b90509250929050565b60008060006060848603121561202257600080fd5b61202b84611fb1565b925061203960208501611fb1565b9150604084013590509250925092565b60006020828403121561205b57600080fd5b61046782611fb1565b60008060006060848603121561207957600080fd5b61208284611fb1565b92506020840135915061209760408501611fb1565b90509250925092565b600080602083850312156120b357600080fd5b823567ffffffffffffffff808211156120cb57600080fd5b818501915085601f8301126120df57600080fd5b8135818111156120ee57600080fd5b8660208260051b850101111561210357600080fd5b60209290920196919550909350505050565b60005b83811015612130578181015183820152602001612118565b50506000910152565b60008151808452612151816020860160208601612115565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156121f6577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526121e4858351612139565b945092850192908501906001016121aa565b5092979650505050505050565b6000806040838503121561221657600080fd5b61221f83611fb1565b946020939093013593505050565b801515811461173e57600080fd5b600080600080600060a0868803121561225357600080fd5b61225c86611fb1565b9450602086013561226c8161222d565b94979496505050506040830135926060810135926080909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561046a5761046a61228a565b8082018082111561046a5761046a61228a565b808202811582820484141761046a5761046a61228a565b60008261232c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561234357600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126123dd57600080fd5b83018035915067ffffffffffffffff8211156123f857600080fd5b60200191503681900382131561240d57600080fd5b9250929050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124455761244561228a565b5060010190565b60006020828403121561245e57600080fd5b81516105238161222d565b6000825161247b818460208701612115565b9190910192915050565b602081526000610467602083018461213956fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122058279542ff02b69f397882804650d6aba2916365bc7a2e34a5b6c3ee54ecfa2964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "baseRewardPerToken(address)": {
        "details": "the value returned is represented by a uint256 with fixed precision of 18 decimals.",
        "params": {
          "stakedToken": "The address of the staked token to query."
        },
        "returns": {
          "_0": "uint256 Total base reward per token that will be applied, pro-rata, to stakers."
        }
      },
      "configureStakingToken(address,bool,uint256,uint256,uint256)": {
        "details": "The owner should ensure that the token enabled is a standard ERC20 token to ensure correct functionality.",
        "params": {
          "baseEmissionRate": "The base emission rate for staking the token. This is split pro-rata between all users.",
          "enabled": "Whether the token is enabled for staking.",
          "maxMultiplier": "The maximum multiplier for staking which increases your rewards the longer you stake.",
          "secondsToMaxMultiplier": "The number of seconds needed to stake to reach the maximum multiplier.",
          "stakedToken": "The address of the token that can be staked."
        }
      },
      "exit(address)": {
        "details": "Calling this method will reset the caller's reward multiplier.",
        "params": {
          "stakedToken": "The address of the token to get rewards for."
        }
      },
      "getAverageDepositTimePostDeposit(address,address,uint256)": {
        "params": {
          "account": "The address of the user to query.",
          "stakedToken": "The address of the staked token to query."
        },
        "returns": {
          "_0": "uint256 Average post deposit time, considering all deposits to date."
        }
      },
      "getCumulativeStaked(address)": {
        "params": {
          "stakedToken": "The address of the staked token to query."
        },
        "returns": {
          "_0": "uint256 Total amount staked of the stakedToken."
        }
      },
      "getOutstandingRewards(address,address)": {
        "params": {
          "account": "The address of the user to query.",
          "stakedToken": "The address of the staked token to query."
        },
        "returns": {
          "_0": "uint256 Total outstanding rewards entitled to user."
        }
      },
      "getTimeSinceAverageDeposit(address,address)": {
        "params": {
          "account": "The address of the user to query.",
          "stakedToken": "The address of the staked token to query."
        },
        "returns": {
          "_0": "uint256 Time, in seconds, between the users average deposit time and the current time."
        }
      },
      "getUserRewardMultiplier(address,address)": {
        "details": "the value returned is represented by a uint256 with fixed precision of 18 decimals.",
        "params": {
          "account": "The address of the user to query.",
          "stakedToken": "The address of the staked token to query."
        },
        "returns": {
          "_0": "uint256 User multiplier, applied to the baseRewardPerToken, when claiming rewards."
        }
      },
      "getUserStake(address,address)": {
        "params": {
          "account": "The address of user to query.",
          "stakedToken": "The address of the staked token to query."
        },
        "returns": {
          "_0": "UserDeposit Struct with: {cumulativeBalance,averageDepositTime,rewardsAccumulatedPerToken,rewardsOutstanding}"
        }
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverToken(address)": {
        "params": {
          "token": "The address of the token to skim."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stake(address,uint256)": {
        "details": "The caller of this function must approve this contract to spend amount of stakedToken.",
        "params": {
          "amount": "The amount of the token to stake.",
          "stakedToken": "The address of the token to stake."
        }
      },
      "stakeFor(address,uint256,address)": {
        "details": "The caller of this function must approve this contract to spend amount of stakedToken.The caller of this function is effectively donating their tokens to the beneficiary. The beneficiary can then unstake or claim rewards as they wish.",
        "params": {
          "amount": "The amount of the token to stake.",
          "beneficiary": "User that caller wants to stake on behalf of.",
          "stakedToken": "The address of the token to stake."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(address,uint256)": {
        "params": {
          "amount": "The amount of the token to withdraw.",
          "stakedToken": "The address of the token to withdraw."
        }
      },
      "withdrawReward(address)": {
        "details": "Calling this method will reset the caller's reward multiplier.",
        "params": {
          "stakedToken": "The address of the token to get rewards for."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "baseRewardPerToken(address)": {
        "notice": "Returns the base rewards per staked token for a given staking token. This factors in the last time any internal logic was called on this contract to correctly attribute retroactive cumulative rewards."
      },
      "configureStakingToken(address,bool,uint256,uint256,uint256)": {
        "notice": "Enable a token for staking."
      },
      "exit(address)": {
        "notice": "Exits a staking position by unstaking and getting rewards. This totally exits the staking position."
      },
      "getAverageDepositTimePostDeposit(address,address,uint256)": {
        "notice": "Returns a users new average deposit time, considering the addition of a new deposit. This factors in the cumulative previous deposits, new deposit and time from the last deposit."
      },
      "getCumulativeStaked(address)": {
        "notice": "Returns the total staked for a given stakedToken."
      },
      "getOutstandingRewards(address,address)": {
        "notice": "Returns the total outstanding rewards entitled to a user for a given staking token. This factors in the users staking duration (and therefore reward multiplier) and their pro-rata share of the total rewards."
      },
      "getTimeSinceAverageDeposit(address,address)": {
        "notice": "Returns the time that has elapsed between the current time and the last users average deposit time."
      },
      "getUserRewardMultiplier(address,address)": {
        "notice": "Returns the multiplier applied to the base reward per staked token for a given staking token and account. The longer a user stakes the higher their multiplier up to maxMultiplier for that given staking token. any internal logic was called on this contract to correctly attribute retroactive cumulative rewards."
      },
      "getUserStake(address,address)": {
        "notice": "Returns all the information associated with a user's stake."
      },
      "recoverToken(address)": {
        "notice": "Enables the owner to recover tokens dropped onto the contract. This could be used to remove unclaimed staking rewards or recover excess LP tokens that were inadvertently dropped onto the contract. Importantly, the contract will only let the owner recover staked excess tokens above what the contract thinks it should have. i.e the owner cant use this method to steal staked tokens, only recover excess ones mistakenly sent to the contract."
      },
      "stake(address,uint256)": {
        "notice": "Stake tokens for rewards."
      },
      "stakeFor(address,uint256,address)": {
        "notice": "Stake tokens for rewards on behalf of `beneficiary`."
      },
      "unstake(address,uint256)": {
        "notice": "Withdraw staked tokens."
      },
      "withdrawReward(address)": {
        "notice": "Get entitled rewards for the staker."
      }
    },
    "notice": "Across token distribution contract. Contract is inspired by Synthetix staking contract and Ampleforth geyser. Stakers start by earning their pro-rata share of a baseEmissionRate per second which increases based on how long they have staked in the contract, up to a max emission rate of baseEmissionRate * maxMultiplier. Multiple LP tokens can be staked in this contract enabling depositors to batch stake and claim via multicall. Note that this contract is only compatible with standard ERC20 tokens, and not tokens that charge fees on transfers, dynamically change balance, or have double entry-points. It's up to the contract owner to ensure they only add supported tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 303,
        "contract": "contracts/AcceleratingDistributor.sol:AcceleratingDistributor",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 187,
        "contract": "contracts/AcceleratingDistributor.sol:AcceleratingDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2852,
        "contract": "contracts/AcceleratingDistributor.sol:AcceleratingDistributor",
        "label": "stakingTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(StakingToken)2847_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(StakingToken)2847_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AcceleratingDistributor.StakingToken)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingToken)2847_storage"
      },
      "t_mapping(t_address,t_struct(UserDeposit)2827_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AcceleratingDistributor.UserDeposit)",
        "numberOfBytes": "32",
        "value": "t_struct(UserDeposit)2827_storage"
      },
      "t_struct(StakingToken)2847_storage": {
        "encoding": "inplace",
        "label": "struct AcceleratingDistributor.StakingToken",
        "members": [
          {
            "astId": 2829,
            "contract": "contracts/AcceleratingDistributor.sol:AcceleratingDistributor",
            "label": "enabled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2831,
            "contract": "contracts/AcceleratingDistributor.sol:AcceleratingDistributor",
            "label": "baseEmissionRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2833,
            "contract": "contracts/AcceleratingDistributor.sol:AcceleratingDistributor",
            "label": "maxMultiplier",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2835,
            "contract": "contracts/AcceleratingDistributor.sol:AcceleratingDistributor",
            "label": "secondsToMaxMultiplier",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2837,
            "contract": "contracts/AcceleratingDistributor.sol:AcceleratingDistributor",
            "label": "cumulativeStaked",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2839,
            "contract": "contracts/AcceleratingDistributor.sol:AcceleratingDistributor",
            "label": "rewardPerTokenStored",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2841,
            "contract": "contracts/AcceleratingDistributor.sol:AcceleratingDistributor",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2846,
            "contract": "contracts/AcceleratingDistributor.sol:AcceleratingDistributor",
            "label": "stakingBalances",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(UserDeposit)2827_storage)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserDeposit)2827_storage": {
        "encoding": "inplace",
        "label": "struct AcceleratingDistributor.UserDeposit",
        "members": [
          {
            "astId": 2820,
            "contract": "contracts/AcceleratingDistributor.sol:AcceleratingDistributor",
            "label": "cumulativeBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2822,
            "contract": "contracts/AcceleratingDistributor.sol:AcceleratingDistributor",
            "label": "averageDepositTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2824,
            "contract": "contracts/AcceleratingDistributor.sol:AcceleratingDistributor",
            "label": "rewardsAccumulatedPerToken",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2826,
            "contract": "contracts/AcceleratingDistributor.sol:AcceleratingDistributor",
            "label": "rewardsOutstanding",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
