{
  "language": "Solidity",
  "sources": {
    "contracts/AcceleratingDistributor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\r\n\r\n/**\r\n * @notice Across token distribution contract. Contract is inspired by Synthetix staking contract and Ampleforth geyser.\r\n * Stakers start by earning their pro-rata share of a baseEmissionRate per second which increases based on how long\r\n * they have staked in the contract, up to a max emission rate of baseEmissionRate * maxMultiplier. Multiple LP tokens\r\n * can be staked in this contract enabling depositors to batch stake and claim via multicall. Note that this contract is\r\n * only compatible with standard ERC20 tokens, and not tokens that charge fees on transfers, dynamically change\r\n * balance, or have double entry-points. It's up to the contract owner to ensure they only add supported tokens.\r\n */\r\n\r\ncontract AcceleratingDistributor is ReentrancyGuard, Ownable, Multicall {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public immutable rewardToken;\r\n\r\n    // Each User deposit is tracked with the information below.\r\n    struct UserDeposit {\r\n        uint256 cumulativeBalance;\r\n        uint256 averageDepositTime;\r\n        uint256 rewardsAccumulatedPerToken;\r\n        uint256 rewardsOutstanding;\r\n    }\r\n\r\n    struct StakingToken {\r\n        bool enabled;\r\n        uint256 baseEmissionRate;\r\n        uint256 maxMultiplier;\r\n        uint256 secondsToMaxMultiplier;\r\n        uint256 cumulativeStaked;\r\n        uint256 rewardPerTokenStored;\r\n        uint256 lastUpdateTime;\r\n        mapping(address => UserDeposit) stakingBalances;\r\n    }\r\n\r\n    mapping(address => StakingToken) public stakingTokens;\r\n\r\n    modifier onlyEnabled(address stakedToken) {\r\n        require(stakingTokens[stakedToken].enabled, \"stakedToken not enabled\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyInitialized(address stakedToken) {\r\n        require(stakingTokens[stakedToken].lastUpdateTime != 0, \"stakedToken not initialized\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _rewardToken) {\r\n        rewardToken = IERC20(_rewardToken);\r\n    }\r\n\r\n    function getCurrentTime() public view virtual returns (uint256) {\r\n        return block.timestamp; // solhint-disable-line not-rely-on-time\r\n    }\r\n\r\n    /**************************************\r\n     *               EVENTS               *\r\n     **************************************/\r\n\r\n    event TokenConfiguredForStaking(\r\n        address indexed token,\r\n        bool enabled,\r\n        uint256 baseEmissionRate,\r\n        uint256 maxMultiplier,\r\n        uint256 secondsToMaxMultiplier,\r\n        uint256 lastUpdateTime\r\n    );\r\n    event RecoverToken(address indexed token, uint256 amount);\r\n    event Stake(\r\n        address indexed token,\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 averageDepositTime,\r\n        uint256 cumulativeBalance,\r\n        uint256 tokenCumulativeStaked\r\n    );\r\n    event Unstake(\r\n        address indexed token,\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 remainingCumulativeBalance,\r\n        uint256 tokenCumulativeStaked\r\n    );\r\n    event RewardsWithdrawn(\r\n        address indexed token,\r\n        address indexed user,\r\n        uint256 rewardsToSend,\r\n        uint256 tokenLastUpdateTime,\r\n        uint256 tokenRewardPerTokenStored,\r\n        uint256 userRewardsOutstanding,\r\n        uint256 userRewardsPaidPerToken\r\n    );\r\n    event Exit(address indexed token, address indexed user, uint256 tokenCumulativeStaked);\r\n\r\n    /**************************************\r\n     *          ADMIN FUNCTIONS           *\r\n     **************************************/\r\n\r\n    /**\r\n     * @notice Enable a token for staking.\r\n     * @dev The owner should ensure that the token enabled is a standard ERC20 token to ensure correct functionality.\r\n     * @param stakedToken The address of the token that can be staked.\r\n     * @param enabled Whether the token is enabled for staking.\r\n     * @param baseEmissionRate The base emission rate for staking the token. This is split pro-rata between all users.\r\n     * @param maxMultiplier The maximum multiplier for staking which increases your rewards the longer you stake.\r\n     * @param secondsToMaxMultiplier The number of seconds needed to stake to reach the maximum multiplier.\r\n     */\r\n    function configureStakingToken(\r\n        address stakedToken,\r\n        bool enabled,\r\n        uint256 baseEmissionRate,\r\n        uint256 maxMultiplier,\r\n        uint256 secondsToMaxMultiplier\r\n    ) external onlyOwner {\r\n        // Validate input to ensure system stability and avoid unexpected behavior. Note we dont place a lower bound on\r\n        // the baseEmissionRate. If this value is less than 1e18 then you will slowly loose your staking rewards over time.\r\n        // Because of the way balances are managed, the staked token cannot be the reward token. Otherwise, reward\r\n        // payouts could eat into user balances. We choose not to constrain `maxMultiplier` to be > 1e18 so that\r\n        // admin can choose to allow decreasing emissions over time. This is not the intended use case, but we see no\r\n        // benefit to removing this additional flexibility. If set < 1e18, then user's rewards outstanding will\r\n        // decrease over time. Incentives for stakers would look different if `maxMultiplier` were set < 1e18\r\n        require(stakedToken != address(rewardToken), \"Staked token is reward token\");\r\n        require(maxMultiplier < 1e36, \"maxMultiplier can not be set too large\");\r\n        require(secondsToMaxMultiplier > 0, \"secondsToMaxMultiplier must be greater than 0\");\r\n        require(baseEmissionRate < 1e27, \"baseEmissionRate can not be set too large\");\r\n\r\n        StakingToken storage stakingToken = stakingTokens[stakedToken];\r\n\r\n        // If this token is already initialized, make sure we update the rewards before modifying any params.\r\n        if (stakingToken.lastUpdateTime != 0) _updateReward(stakedToken, address(0));\r\n\r\n        stakingToken.enabled = enabled;\r\n        stakingToken.baseEmissionRate = baseEmissionRate;\r\n        stakingToken.maxMultiplier = maxMultiplier;\r\n        stakingToken.secondsToMaxMultiplier = secondsToMaxMultiplier;\r\n        stakingToken.lastUpdateTime = getCurrentTime();\r\n\r\n        emit TokenConfiguredForStaking(\r\n            stakedToken,\r\n            enabled,\r\n            baseEmissionRate,\r\n            maxMultiplier,\r\n            secondsToMaxMultiplier,\r\n            stakingToken.lastUpdateTime\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Enables the owner to recover tokens dropped onto the contract. This could be used to remove unclaimed\r\n     * staking rewards or recover excess LP tokens that were inadvertently dropped onto the contract. Importantly, the\r\n     * contract will only let the owner recover staked excess tokens above what the contract thinks it should have. i.e\r\n     * the owner cant use this method to steal staked tokens, only recover excess ones mistakenly sent to the contract.\r\n     * @param token The address of the token to skim.\r\n     */\r\n    function recoverToken(address token) external onlyOwner {\r\n        // If the token is an enabled staking token then we want to preform a skim action where we send back any extra\r\n        // tokens that are not accounted for in the cumulativeStaked variable. This lets the owner recover extra tokens\r\n        // sent to the contract that were not explicitly staked. if the token is not enabled for staking then we simply\r\n        // send back the full amount of tokens that the contract has.\r\n        uint256 amount = IERC20(token).balanceOf(address(this));\r\n        if (stakingTokens[token].lastUpdateTime != 0) amount -= stakingTokens[token].cumulativeStaked;\r\n        require(amount > 0, \"Can't recover 0 tokens\");\r\n        IERC20(token).safeTransfer(owner(), amount);\r\n        emit RecoverToken(token, amount);\r\n    }\r\n\r\n    /**************************************\r\n     *          STAKER FUNCTIONS          *\r\n     **************************************/\r\n\r\n    /**\r\n     * @notice Stake tokens for rewards.\r\n     * @dev The caller of this function must approve this contract to spend amount of stakedToken.\r\n     * @param stakedToken The address of the token to stake.\r\n     * @param amount The amount of the token to stake.\r\n     */\r\n    function stake(address stakedToken, uint256 amount) external nonReentrant onlyEnabled(stakedToken) {\r\n        _updateReward(stakedToken, msg.sender);\r\n\r\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[msg.sender];\r\n\r\n        uint256 averageDepositTime = getAverageDepositTimePostDeposit(stakedToken, msg.sender, amount);\r\n\r\n        userDeposit.averageDepositTime = averageDepositTime;\r\n        userDeposit.cumulativeBalance += amount;\r\n        stakingTokens[stakedToken].cumulativeStaked += amount;\r\n\r\n        IERC20(stakedToken).safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        emit Stake(\r\n            stakedToken,\r\n            msg.sender,\r\n            amount,\r\n            averageDepositTime,\r\n            userDeposit.cumulativeBalance,\r\n            stakingTokens[stakedToken].cumulativeStaked\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw staked tokens.\r\n     * @param stakedToken The address of the token to withdraw.\r\n     * @param amount The amount of the token to withdraw.\r\n     */\r\n    function unstake(address stakedToken, uint256 amount) public nonReentrant onlyInitialized(stakedToken) {\r\n        _updateReward(stakedToken, msg.sender);\r\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[msg.sender];\r\n\r\n        // Note: these will revert if underflow so you cant unstake more than your cumulativeBalance.\r\n        userDeposit.cumulativeBalance -= amount;\r\n        stakingTokens[stakedToken].cumulativeStaked -= amount;\r\n\r\n        IERC20(stakedToken).safeTransfer(msg.sender, amount);\r\n\r\n        emit Unstake(\r\n            stakedToken,\r\n            msg.sender,\r\n            amount,\r\n            userDeposit.cumulativeBalance,\r\n            stakingTokens[stakedToken].cumulativeStaked\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Get entitled rewards for the staker.\r\n     * @dev Calling this method will reset the caller's reward multiplier.\r\n     * @param stakedToken The address of the token to get rewards for.\r\n     */\r\n    function withdrawReward(address stakedToken) public nonReentrant onlyInitialized(stakedToken) {\r\n        _updateReward(stakedToken, msg.sender);\r\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[msg.sender];\r\n\r\n        uint256 rewardsToSend = userDeposit.rewardsOutstanding;\r\n        if (rewardsToSend > 0) {\r\n            userDeposit.rewardsOutstanding = 0;\r\n            userDeposit.averageDepositTime = getCurrentTime();\r\n            rewardToken.safeTransfer(msg.sender, rewardsToSend);\r\n        }\r\n\r\n        emit RewardsWithdrawn(\r\n            stakedToken,\r\n            msg.sender,\r\n            rewardsToSend,\r\n            stakingTokens[stakedToken].lastUpdateTime,\r\n            stakingTokens[stakedToken].rewardPerTokenStored,\r\n            userDeposit.rewardsOutstanding,\r\n            userDeposit.rewardsAccumulatedPerToken\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Exits a staking position by unstaking and getting rewards. This totally exits the staking position.\r\n     * @dev Calling this method will reset the caller's reward multiplier.\r\n     * @param stakedToken The address of the token to get rewards for.\r\n     */\r\n    function exit(address stakedToken) external onlyInitialized(stakedToken) {\r\n        _updateReward(stakedToken, msg.sender);\r\n        unstake(stakedToken, stakingTokens[stakedToken].stakingBalances[msg.sender].cumulativeBalance);\r\n        withdrawReward(stakedToken);\r\n\r\n        emit Exit(stakedToken, msg.sender, stakingTokens[stakedToken].cumulativeStaked);\r\n    }\r\n\r\n    /**************************************\r\n     *           VIEW FUNCTIONS           *\r\n     **************************************/\r\n\r\n    /**\r\n     * @notice Returns the total staked for a given stakedToken.\r\n     * @param stakedToken The address of the staked token to query.\r\n     * @return uint256 Total amount staked of the stakedToken.\r\n     */\r\n    function getCumulativeStaked(address stakedToken) external view returns (uint256) {\r\n        return stakingTokens[stakedToken].cumulativeStaked;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns all the information associated with a user's stake.\r\n     * @param stakedToken The address of the staked token to query.\r\n     * @param account The address of user to query.\r\n     * @return UserDeposit Struct with: {cumulativeBalance,averageDepositTime,rewardsAccumulatedPerToken,rewardsOutstanding}\r\n     */\r\n    function getUserStake(address stakedToken, address account) external view returns (UserDeposit memory) {\r\n        return stakingTokens[stakedToken].stakingBalances[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the base rewards per staked token for a given staking token. This factors in the last time\r\n     * any internal logic was called on this contract to correctly attribute retroactive cumulative rewards.\r\n     * @dev the value returned is represented by a uint256 with fixed precision of 18 decimals.\r\n     * @param stakedToken The address of the staked token to query.\r\n     * @return uint256 Total base reward per token that will be applied, pro-rata, to stakers.\r\n     */\r\n    function baseRewardPerToken(address stakedToken) public view returns (uint256) {\r\n        StakingToken storage stakingToken = stakingTokens[stakedToken];\r\n        if (stakingToken.cumulativeStaked == 0) return stakingToken.rewardPerTokenStored;\r\n\r\n        return\r\n            stakingToken.rewardPerTokenStored +\r\n            ((getCurrentTime() - stakingToken.lastUpdateTime) * stakingToken.baseEmissionRate * 1e18) /\r\n            stakingToken.cumulativeStaked;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the multiplier applied to the base reward per staked token for a given staking token and account.\r\n     * The longer a user stakes the higher their multiplier up to maxMultiplier for that given staking token.\r\n     * any internal logic was called on this contract to correctly attribute retroactive cumulative rewards.\r\n     * @dev the value returned is represented by a uint256 with fixed precision of 18 decimals.\r\n     * @param stakedToken The address of the staked token to query.\r\n     * @param account The address of the user to query.\r\n     * @return uint256 User multiplier, applied to the baseRewardPerToken, when claiming rewards.\r\n     */\r\n    function getUserRewardMultiplier(address stakedToken, address account) public view returns (uint256) {\r\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[account];\r\n        if (userDeposit.averageDepositTime == 0 || userDeposit.cumulativeBalance == 0) return 1e18;\r\n        uint256 fractionOfMaxMultiplier = ((getTimeSinceAverageDeposit(stakedToken, account)) * 1e18) /\r\n            stakingTokens[stakedToken].secondsToMaxMultiplier;\r\n\r\n        // At maximum, the multiplier should be equal to the maxMultiplier.\r\n        if (fractionOfMaxMultiplier > 1e18) fractionOfMaxMultiplier = 1e18;\r\n        return 1e18 + (fractionOfMaxMultiplier * (stakingTokens[stakedToken].maxMultiplier - 1e18)) / (1e18);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the total outstanding rewards entitled to a user for a given staking token. This factors in the\r\n     * users staking duration (and therefore reward multiplier) and their pro-rata share of the total rewards.\r\n     * @param stakedToken The address of the staked token to query.\r\n     * @param account The address of the user to query.\r\n     * @return uint256 Total outstanding rewards entitled to user.\r\n     */\r\n    function getOutstandingRewards(address stakedToken, address account) public view returns (uint256) {\r\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[account];\r\n\r\n        uint256 userRewardMultiplier = getUserRewardMultiplier(stakedToken, account);\r\n\r\n        uint256 newUserRewards = (userDeposit.cumulativeBalance *\r\n            (baseRewardPerToken(stakedToken) - userDeposit.rewardsAccumulatedPerToken) *\r\n            userRewardMultiplier) / (1e18 * 1e18);\r\n\r\n        return newUserRewards + userDeposit.rewardsOutstanding;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the time that has elapsed between the current time and the last users average deposit time.\r\n     * @param stakedToken The address of the staked token to query.\r\n     * @param account The address of the user to query.\r\n     *@return uint256 Time, in seconds, between the users average deposit time and the current time.\r\n     */\r\n    function getTimeSinceAverageDeposit(address stakedToken, address account) public view returns (uint256) {\r\n        return getCurrentTime() - stakingTokens[stakedToken].stakingBalances[account].averageDepositTime;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns a users new average deposit time, considering the addition of a new deposit. This factors in the\r\n     * cumulative previous deposits, new deposit and time from the last deposit.\r\n     * @param stakedToken The address of the staked token to query.\r\n     * @param account The address of the user to query.\r\n     * @return uint256 Average post deposit time, considering all deposits to date.\r\n     */\r\n    function getAverageDepositTimePostDeposit(\r\n        address stakedToken,\r\n        address account,\r\n        uint256 amount\r\n    ) public view returns (uint256) {\r\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[account];\r\n        if (amount == 0) return userDeposit.averageDepositTime;\r\n        uint256 amountWeightedTime = (((amount * 1e18) / (userDeposit.cumulativeBalance + amount)) *\r\n            (getTimeSinceAverageDeposit(stakedToken, account))) / 1e18;\r\n        return userDeposit.averageDepositTime + amountWeightedTime;\r\n    }\r\n\r\n    /**************************************\r\n     *         INTERNAL FUNCTIONS         *\r\n     **************************************/\r\n\r\n    // Update the internal counters for a given stakedToken and user.\r\n    function _updateReward(address stakedToken, address account) internal {\r\n        StakingToken storage stakingToken = stakingTokens[stakedToken];\r\n        stakingToken.rewardPerTokenStored = baseRewardPerToken(stakedToken);\r\n        stakingToken.lastUpdateTime = getCurrentTime();\r\n        if (account != address(0)) {\r\n            UserDeposit storage userDeposit = stakingToken.stakingBalances[account];\r\n            userDeposit.rewardsOutstanding = getOutstandingRewards(stakedToken, account);\r\n            userDeposit.rewardsAccumulatedPerToken = stakingToken.rewardPerTokenStored;\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Multicall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\nabstract contract Multicall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/test/AcceleratingDistributor_Testable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../AcceleratingDistributor.sol\";\r\nimport \"./Testable.sol\";\r\n\r\n/**\r\n * @notice // Tesable version of the AcceleratingDistributor that enables time to be overridden with a Testable contract.\r\n */\r\n\r\ncontract AcceleratingDistributor_Testable is AcceleratingDistributor, Testable {\r\n    constructor(address _rewardToken, address _timer) AcceleratingDistributor(_rewardToken) Testable(_timer) {}\r\n\r\n    function getCurrentTime() public view override(AcceleratingDistributor, Testable) returns (uint256) {\r\n        return Testable.getCurrentTime();\r\n    }\r\n}\r\n"
    },
    "contracts/test/Testable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Timer.sol\";\r\n\r\n/**\r\n * @title Base class that provides time overrides, but only if being run in test mode.\r\n */\r\nabstract contract Testable {\r\n    // If the contract is being run in production, then `timerAddress` will be the 0x0 address.\r\n    // Note: this variable should be set on construction and never modified.\r\n    address public timerAddress;\r\n\r\n    /**\r\n     * @notice Constructs the Testable contract. Called by child contracts.\r\n     * @param _timerAddress Contract that stores the current time in a testing environment.\r\n     * Must be set to 0x0 for production environments that use live time.\r\n     */\r\n    constructor(address _timerAddress) {\r\n        timerAddress = _timerAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Reverts if not running in test mode.\r\n     */\r\n    modifier onlyIfTest() {\r\n        require(timerAddress != address(0x0));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the current time.\r\n     * @dev Will revert if not running in test mode.\r\n     * @param time timestamp to set current Testable time to.\r\n     */\r\n    function setCurrentTime(uint256 time) external onlyIfTest {\r\n        Timer(timerAddress).setCurrentTime(time);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\r\n     * Otherwise, it will return the block timestamp.\r\n     * @return uint for the current Testable timestamp.\r\n     */\r\n    function getCurrentTime() public view virtual returns (uint256) {\r\n        if (timerAddress != address(0x0)) return Timer(timerAddress).getCurrentTime();\r\n        else return block.timestamp; // solhint-disable-line not-rely-on-time\r\n    }\r\n}\r\n"
    },
    "contracts/test/Timer.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title Universal store of current contract time for testing environments.\n */\ncontract Timer {\n    uint256 private currentTime;\n\n    constructor() {\n        currentTime = block.timestamp; // solhint-disable-line not-rely-on-time\n    }\n\n    /**\n     * @notice Sets the current time.\n     * @dev Will revert if not running in test mode.\n     * @param time timestamp to set `currentTime` to.\n     */\n    function setCurrentTime(uint256 time) external {\n        currentTime = time;\n    }\n\n    /**\n     * @notice Gets the currentTime variable set in the Timer.\n     * @return uint256 for the current Testable timestamp.\n     */\n    function getCurrentTime() public view returns (uint256) {\n        return currentTime;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/test/TestToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TestToken is ERC20, Ownable {\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}\n\n    function mint(address _guy, uint256 _wad) public onlyOwner {\n        _mint(_guy, _wad);\n    }\n\n    function burn(address _guy, uint256 _wad) public onlyOwner {\n        _burn(_guy, _wad);\n    }\n}\n"
    },
    "contracts/AcrossToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract AcrossToken is ERC20, Ownable {\n    constructor() ERC20(\"Across Protocol Token\", \"ACX\") {}\n\n    function mint(address _guy, uint256 _wad) external onlyOwner {\n        _mint(_guy, _wad);\n    }\n\n    function burn(address _guy, uint256 _wad) external onlyOwner {\n        _burn(_guy, _wad);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
