{
  "address": "0x985e8A89Dd6Af8896Ef075c8dd93512433dc5829",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AcrossMerkleDistributor",
          "name": "_merkleDistributor",
          "type": "address"
        },
        {
          "internalType": "contract AcceleratingDistributor",
          "name": "_acceleratingDistributor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "acceleratingDistributor",
      "outputs": [
        {
          "internalType": "contract AcceleratingDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "windowIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accountIndex",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct MerkleDistributorInterface.Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "claimAndStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleDistributor",
      "outputs": [
        {
          "internalType": "contract AcrossMerkleDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x81f64e35b730cfe2efa013d2145244fc829021c6f4bacb560ee7f4f509cf0007",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0x985e8A89Dd6Af8896Ef075c8dd93512433dc5829",
    "transactionIndex": 91,
    "gasUsed": "993939",
    "logsBloom": "0x
    "blockHash": "0xf326ac33e20a1661739a09e550ca8435e73f1a781273097b361b7f763774625a",
    "transactionHash": "0x81f64e35b730cfe2efa013d2145244fc829021c6f4bacb560ee7f4f509cf0007",
    "logs": [],
    "blockNumber": 15977131,
    "cumulativeGasUsed": "6916642",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xE50b2cEAC4f60E840Ae513924033E753e2366487", "0x9040e41eF5E8b281535a96D9a48aCb8cfaBD9a48"],
  "numDeployments": 1,
  "solcInputHash": "17686732f199602ed40e6e94df0fb034",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AcrossMerkleDistributor\",\"name\":\"_merkleDistributor\",\"type\":\"address\"},{\"internalType\":\"contract AcceleratingDistributor\",\"name\":\"_acceleratingDistributor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"acceleratingDistributor\",\"outputs\":[{\"internalType\":\"contract AcceleratingDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"windowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MerkleDistributorInterface.Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"claimAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleDistributor\",\"outputs\":[{\"internalType\":\"contract AcrossMerkleDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimAndStake((uint256,uint256,uint256,address,bytes32[]))\":{\"details\":\"Will revert if `merkleDistributor` is not set to valid MerkleDistributor contract.Will revert if the claim recipient account is not equal to caller, or if the reward token      for claim is not a valid staking token.Will revert if this contract is not a \\\"whitelisted claimer\\\" on the MerkleDistributor contract.\",\"params\":{\"_claim\":\"Claim leaf to retrieve from MerkleDistributor.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimAndStake((uint256,uint256,uint256,address,bytes32[]))\":{\"notice\":\"Claim tokens from a MerkleDistributor contract and stake them for rewards in AcceleratingDistributor.\"}},\"notice\":\"Allows claimer to claim tokens from AcrossMerkleDistributor and stake into AcceleratingDistributor atomically in a single transaction. This intermediary contract also removes the need for claimer to approve AcceleratingDistributor to spend its staking tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClaimAndStake.sol\":\"ClaimAndStake\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@across-protocol/contracts-v2/contracts/merkle-distributor/AcrossMerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uma/core/contracts/merkle-distributor/implementation/MerkleDistributor.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title  Extended MerkleDistributor contract.\\n * @notice Adds additional constraints governing who can claim leaves from merkle windows.\\n */\\ncontract AcrossMerkleDistributor is MerkleDistributor {\\n    using SafeERC20 for IERC20;\\n\\n    // Addresses that can claim on user's behalf.\\n    mapping(address => bool) public whitelistedClaimers;\\n\\n    /****************************************\\n     *                EVENTS\\n     ****************************************/\\n    event WhitelistedClaimer(address indexed claimer, bool indexed whitelist);\\n    event ClaimFor(\\n        address indexed caller,\\n        uint256 windowIndex,\\n        address indexed account,\\n        uint256 accountIndex,\\n        uint256 amount,\\n        address indexed rewardToken\\n    );\\n\\n    /****************************\\n     *      ADMIN FUNCTIONS\\n     ****************************/\\n\\n    /**\\n     * @notice Updates whitelisted claimer status.\\n     * @dev Callable only by owner.\\n     * @param newContract Reset claimer contract to this address.\\n     * @param whitelist True to whitelist claimer, False otherwise.\\n     */\\n    function whitelistClaimer(address newContract, bool whitelist) external onlyOwner {\\n        whitelistedClaimers[newContract] = whitelist;\\n        emit WhitelistedClaimer(newContract, whitelist);\\n    }\\n\\n    /****************************\\n     *    NON-ADMIN FUNCTIONS\\n     ****************************/\\n\\n    /**\\n     * @notice Batch claims to reduce gas versus individual submitting all claims. Method will fail\\n     *         if any individual claims within the batch would fail.\\n     * @dev    All claim recipients must be equal to msg.sender.\\n     * @param claims array of claims to claim.\\n     */\\n    function claimMulti(Claim[] memory claims) public override {\\n        uint256 claimCount = claims.length;\\n        for (uint256 i = 0; i < claimCount; i++) {\\n            require(claims[i].account == msg.sender, \\\"invalid claimer\\\");\\n        }\\n        super.claimMulti(claims);\\n    }\\n\\n    /**\\n     * @notice Claim amount of reward tokens for account, as described by Claim input object.\\n     * @dev    Claim recipient must be equal to msg.sender.\\n     * @param _claim claim object describing amount, accountIndex, account, window index, and merkle proof.\\n     */\\n    function claim(Claim memory _claim) public override {\\n        require(_claim.account == msg.sender, \\\"invalid claimer\\\");\\n        super.claim(_claim);\\n    }\\n\\n    /**\\n     * @notice Executes merkle leaf claim on behaf of user. This can only be called by a trusted\\n     *         claimer address. This function is designed to be called atomically with other transactions\\n     *         that ultimately return the claimed amount to the rightful recipient. For example,\\n     *         AcceleratingDistributor could call this function and then stake atomically on behalf of the user.\\n     * @dev    Caller must be in whitelistedClaimers struct set to \\\"true\\\".\\n     * @param _claim leaf to claim.\\n     */\\n\\n    function claimFor(Claim memory _claim) public {\\n        require(whitelistedClaimers[msg.sender], \\\"unwhitelisted claimer\\\");\\n        _verifyAndMarkClaimed(_claim);\\n        merkleWindows[_claim.windowIndex].rewardToken.safeTransfer(msg.sender, _claim.amount);\\n        emit ClaimFor(\\n            msg.sender,\\n            _claim.windowIndex,\\n            _claim.account,\\n            _claim.accountIndex,\\n            _claim.amount,\\n            address(merkleWindows[_claim.windowIndex].rewardToken)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x770e7f0986351870b1223a1214aaa3084b7cba9f438d7906c62c016ebd11b2c3\",\"license\":\"AGPL-3.0-only\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x35e30a35e23f856cbcee3558b7efdd83f6017a8f1b419710645143d98e892463\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@uma/core/contracts/merkle-distributor/implementation/MerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./MerkleDistributorInterface.sol\\\";\\n\\n/**\\n * Inspired by:\\n * - https://github.com/pie-dao/vested-token-migration-app\\n * - https://github.com/Uniswap/merkle-distributor\\n * - https://github.com/balancer-labs/erc20-redeemable\\n *\\n * @title  MerkleDistributor contract.\\n * @notice Allows an owner to distribute any reward ERC20 to claimants according to Merkle roots. The owner can specify\\n *         multiple Merkle roots distributions with customized reward currencies.\\n * @dev    The Merkle trees are not validated in any way, so the system assumes the contract owner behaves honestly.\\n */\\ncontract MerkleDistributor is MerkleDistributorInterface, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    // Windows are mapped to arbitrary indices.\\n    mapping(uint256 => Window) public merkleWindows;\\n\\n    // Index of next created Merkle root.\\n    uint256 public nextCreatedIndex;\\n\\n    // Track which accounts have claimed for each window index.\\n    // Note: uses a packed array of bools for gas optimization on tracking certain claims. Copied from Uniswap's contract.\\n    mapping(uint256 => mapping(uint256 => uint256)) private claimedBitMap;\\n\\n    /****************************************\\n     *                EVENTS\\n     ****************************************/\\n    event Claimed(\\n        address indexed caller,\\n        uint256 windowIndex,\\n        address indexed account,\\n        uint256 accountIndex,\\n        uint256 amount,\\n        address indexed rewardToken\\n    );\\n    event CreatedWindow(\\n        uint256 indexed windowIndex,\\n        uint256 rewardsDeposited,\\n        address indexed rewardToken,\\n        address owner\\n    );\\n    event WithdrawRewards(address indexed owner, uint256 amount, address indexed currency);\\n    event DeleteWindow(uint256 indexed windowIndex, address owner);\\n\\n    /****************************\\n     *      ADMIN FUNCTIONS\\n     ****************************/\\n\\n    /**\\n     * @notice Set merkle root for the next available window index and seed allocations.\\n     * @notice Callable only by owner of this contract. Caller must have approved this contract to transfer\\n     *      `rewardsToDeposit` amount of `rewardToken` or this call will fail. Importantly, we assume that the\\n     *      owner of this contract correctly chooses an amount `rewardsToDeposit` that is sufficient to cover all\\n     *      claims within the `merkleRoot`.\\n     * @param rewardsToDeposit amount of rewards to deposit to seed this allocation.\\n     * @param rewardToken ERC20 reward token.\\n     * @param merkleRoot merkle root describing allocation.\\n     * @param ipfsHash hash of IPFS object, conveniently stored for clients\\n     */\\n    function setWindow(\\n        uint256 rewardsToDeposit,\\n        address rewardToken,\\n        bytes32 merkleRoot,\\n        string calldata ipfsHash\\n    ) external onlyOwner {\\n        uint256 indexToSet = nextCreatedIndex;\\n        nextCreatedIndex = indexToSet + 1;\\n\\n        _setWindow(indexToSet, rewardsToDeposit, rewardToken, merkleRoot, ipfsHash);\\n    }\\n\\n    /**\\n     * @notice Delete merkle root at window index.\\n     * @dev Callable only by owner. Likely to be followed by a withdrawRewards call to clear contract state.\\n     * @param windowIndex merkle root index to delete.\\n     */\\n    function deleteWindow(uint256 windowIndex) external onlyOwner {\\n        delete merkleWindows[windowIndex];\\n        emit DeleteWindow(windowIndex, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Emergency method that transfers rewards out of the contract if the contract was configured improperly.\\n     * @dev Callable only by owner.\\n     * @param rewardCurrency rewards to withdraw from contract.\\n     * @param amount amount of rewards to withdraw.\\n     */\\n    function withdrawRewards(IERC20 rewardCurrency, uint256 amount) external onlyOwner {\\n        rewardCurrency.safeTransfer(msg.sender, amount);\\n        emit WithdrawRewards(msg.sender, amount, address(rewardCurrency));\\n    }\\n\\n    /****************************\\n     *    NON-ADMIN FUNCTIONS\\n     ****************************/\\n\\n    /**\\n     * @notice Batch claims to reduce gas versus individual submitting all claims. Method will fail\\n     *         if any individual claims within the batch would fail.\\n     * @dev    Optimistically tries to batch together consecutive claims for the same account and same\\n     *         reward token to reduce gas. Therefore, the most gas-cost-optimal way to use this method\\n     *         is to pass in an array of claims sorted by account and reward currency. It also reverts\\n     *         when any of individual `_claim`'s `amount` exceeds `remainingAmount` for its window.\\n     * @param claims array of claims to claim.\\n     */\\n    function claimMulti(Claim[] memory claims) public virtual override {\\n        uint256 batchedAmount;\\n        uint256 claimCount = claims.length;\\n        for (uint256 i = 0; i < claimCount; i++) {\\n            Claim memory _claim = claims[i];\\n            _verifyAndMarkClaimed(_claim);\\n            batchedAmount += _claim.amount;\\n\\n            // If the next claim is NOT the same account or the same token (or this claim is the last one),\\n            // then disburse the `batchedAmount` to the current claim's account for the current claim's reward token.\\n            uint256 nextI = i + 1;\\n            IERC20 currentRewardToken = merkleWindows[_claim.windowIndex].rewardToken;\\n            if (\\n                nextI == claimCount ||\\n                // This claim is last claim.\\n                claims[nextI].account != _claim.account ||\\n                // Next claim account is different than current one.\\n                merkleWindows[claims[nextI].windowIndex].rewardToken != currentRewardToken\\n                // Next claim reward token is different than current one.\\n            ) {\\n                currentRewardToken.safeTransfer(_claim.account, batchedAmount);\\n                batchedAmount = 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim amount of reward tokens for account, as described by Claim input object.\\n     * @dev    If the `_claim`'s `amount`, `accountIndex`, and `account` do not exactly match the\\n     *         values stored in the merkle root for the `_claim`'s `windowIndex` this method\\n     *         will revert. It also reverts when `_claim`'s `amount` exceeds `remainingAmount` for the window.\\n     * @param _claim claim object describing amount, accountIndex, account, window index, and merkle proof.\\n     */\\n    function claim(Claim memory _claim) public virtual override {\\n        _verifyAndMarkClaimed(_claim);\\n        merkleWindows[_claim.windowIndex].rewardToken.safeTransfer(_claim.account, _claim.amount);\\n    }\\n\\n    /**\\n     * @notice Returns True if the claim for `accountIndex` has already been completed for the Merkle root at\\n     *         `windowIndex`.\\n     * @dev    This method will only work as intended if all `accountIndex`'s are unique for a given `windowIndex`.\\n     *         The onus is on the Owner of this contract to submit only valid Merkle roots.\\n     * @param windowIndex merkle root to check.\\n     * @param accountIndex account index to check within window index.\\n     * @return True if claim has been executed already, False otherwise.\\n     */\\n    function isClaimed(uint256 windowIndex, uint256 accountIndex) public view returns (bool) {\\n        uint256 claimedWordIndex = accountIndex / 256;\\n        uint256 claimedBitIndex = accountIndex % 256;\\n        uint256 claimedWord = claimedBitMap[windowIndex][claimedWordIndex];\\n        uint256 mask = (1 << claimedBitIndex);\\n        return claimedWord & mask == mask;\\n    }\\n\\n    /**\\n     * @notice Returns rewardToken set by admin for windowIndex.\\n     * @param windowIndex merkle root to check.\\n     * @return address Reward token address\\n     */\\n    function getRewardTokenForWindow(uint256 windowIndex) public view override returns (address) {\\n        return address(merkleWindows[windowIndex].rewardToken);\\n    }\\n\\n    /**\\n     * @notice Returns True if leaf described by {account, amount, accountIndex} is stored in Merkle root at given\\n     *         window index.\\n     * @param _claim claim object describing amount, accountIndex, account, window index, and merkle proof.\\n     * @return valid True if leaf exists.\\n     */\\n    function verifyClaim(Claim memory _claim) public view returns (bool valid) {\\n        bytes32 leaf = keccak256(abi.encodePacked(_claim.account, _claim.amount, _claim.accountIndex));\\n        return MerkleProof.verify(_claim.merkleProof, merkleWindows[_claim.windowIndex].merkleRoot, leaf);\\n    }\\n\\n    /****************************\\n     *     PRIVATE FUNCTIONS\\n     ****************************/\\n\\n    // Mark claim as completed for `accountIndex` for Merkle root at `windowIndex`.\\n    function _setClaimed(uint256 windowIndex, uint256 accountIndex) private {\\n        uint256 claimedWordIndex = accountIndex / 256;\\n        uint256 claimedBitIndex = accountIndex % 256;\\n        claimedBitMap[windowIndex][claimedWordIndex] =\\n            claimedBitMap[windowIndex][claimedWordIndex] |\\n            (1 << claimedBitIndex);\\n    }\\n\\n    // Store new Merkle root at `windowindex`. Pull `rewardsDeposited` from caller to seed distribution for this root.\\n    function _setWindow(\\n        uint256 windowIndex,\\n        uint256 rewardsDeposited,\\n        address rewardToken,\\n        bytes32 merkleRoot,\\n        string memory ipfsHash\\n    ) private {\\n        Window storage window = merkleWindows[windowIndex];\\n        window.merkleRoot = merkleRoot;\\n        window.remainingAmount = rewardsDeposited;\\n        window.rewardToken = IERC20(rewardToken);\\n        window.ipfsHash = ipfsHash;\\n\\n        emit CreatedWindow(windowIndex, rewardsDeposited, rewardToken, msg.sender);\\n\\n        window.rewardToken.safeTransferFrom(msg.sender, address(this), rewardsDeposited);\\n    }\\n\\n    // Verify claim is valid and mark it as completed in this contract.\\n    function _verifyAndMarkClaimed(Claim memory _claim) internal {\\n        // Check claimed proof against merkle window at given index.\\n        require(verifyClaim(_claim), \\\"Incorrect merkle proof\\\");\\n        // Check the account has not yet claimed for this window.\\n        require(!isClaimed(_claim.windowIndex, _claim.accountIndex), \\\"Account has already claimed for this window\\\");\\n\\n        // Proof is correct and claim has not occurred yet, mark claimed complete.\\n        _setClaimed(_claim.windowIndex, _claim.accountIndex);\\n        merkleWindows[_claim.windowIndex].remainingAmount -= _claim.amount;\\n        emit Claimed(\\n            msg.sender,\\n            _claim.windowIndex,\\n            _claim.account,\\n            _claim.accountIndex,\\n            _claim.amount,\\n            address(merkleWindows[_claim.windowIndex].rewardToken)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x45ba14976c04b585ff82098ef0340ae062d9da7a3a2076b2535dbd194d254fc7\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/merkle-distributor/implementation/MerkleDistributorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Concise list of functions in MerkleDistributor implementation that would be called by\\n * a consuming external contract (such as the Across Protocol's AcceleratingDistributor).\\n */\\ninterface MerkleDistributorInterface {\\n    // A Window maps a Merkle root to a reward token address.\\n    struct Window {\\n        // Merkle root describing the distribution.\\n        bytes32 merkleRoot;\\n        // Remaining amount of deposited rewards that have not yet been claimed.\\n        uint256 remainingAmount;\\n        // Currency in which reward is processed.\\n        IERC20 rewardToken;\\n        // IPFS hash of the merkle tree. Can be used to independently fetch recipient proofs and tree. Note that the canonical\\n        // data type for storing an IPFS hash is a multihash which is the concatenation of  <varint hash function code>\\n        // <varint digest size in bytes><hash function output>. We opted to store this in a string type to make it easier\\n        // for users to query the ipfs data without needing to reconstruct the multihash. to view the IPFS data simply\\n        // go to https://cloudflare-ipfs.com/ipfs/<IPFS-HASH>.\\n        string ipfsHash;\\n    }\\n\\n    // Represents an account's claim for `amount` within the Merkle root located at the `windowIndex`.\\n    struct Claim {\\n        uint256 windowIndex;\\n        uint256 amount;\\n        uint256 accountIndex; // Used only for bitmap. Assumed to be unique for each claim.\\n        address account;\\n        bytes32[] merkleProof;\\n    }\\n\\n    function claim(Claim memory _claim) external;\\n\\n    function claimMulti(Claim[] memory claims) external;\\n\\n    function getRewardTokenForWindow(uint256 windowIndex) external view returns (address);\\n}\\n\",\"keccak256\":\"0x0d6527f44b268c3801d45bc1fc6021f22a80070a21d4066430a4d6566e3ff5e7\",\"license\":\"GPL-3.0-only\"},\"contracts/AcceleratingDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\n\\n/**\\n * @notice Across token distribution contract. Contract is inspired by Synthetix staking contract and Ampleforth geyser.\\n * Stakers start by earning their pro-rata share of a baseEmissionRate per second which increases based on how long\\n * they have staked in the contract, up to a max emission rate of baseEmissionRate * maxMultiplier. Multiple LP tokens\\n * can be staked in this contract enabling depositors to batch stake and claim via multicall. Note that this contract is\\n * only compatible with standard ERC20 tokens, and not tokens that charge fees on transfers, dynamically change\\n * balance, or have double entry-points. It's up to the contract owner to ensure they only add supported tokens.\\n */\\n\\ncontract AcceleratingDistributor is ReentrancyGuard, Ownable, Multicall {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable rewardToken;\\n\\n    // Each User deposit is tracked with the information below.\\n    struct UserDeposit {\\n        uint256 cumulativeBalance;\\n        uint256 averageDepositTime;\\n        uint256 rewardsAccumulatedPerToken;\\n        uint256 rewardsOutstanding;\\n    }\\n\\n    struct StakingToken {\\n        bool enabled;\\n        uint256 baseEmissionRate;\\n        uint256 maxMultiplier;\\n        uint256 secondsToMaxMultiplier;\\n        uint256 cumulativeStaked;\\n        uint256 rewardPerTokenStored;\\n        uint256 lastUpdateTime;\\n        mapping(address => UserDeposit) stakingBalances;\\n    }\\n\\n    mapping(address => StakingToken) public stakingTokens;\\n\\n    modifier onlyEnabled(address stakedToken) {\\n        require(stakingTokens[stakedToken].enabled, \\\"stakedToken not enabled\\\");\\n        _;\\n    }\\n\\n    modifier onlyInitialized(address stakedToken) {\\n        require(stakingTokens[stakedToken].lastUpdateTime != 0, \\\"stakedToken not initialized\\\");\\n        _;\\n    }\\n\\n    constructor(address _rewardToken) {\\n        rewardToken = IERC20(_rewardToken);\\n    }\\n\\n    function getCurrentTime() public view virtual returns (uint256) {\\n        return block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /**************************************\\n     *               EVENTS               *\\n     **************************************/\\n\\n    event TokenConfiguredForStaking(\\n        address indexed token,\\n        bool enabled,\\n        uint256 baseEmissionRate,\\n        uint256 maxMultiplier,\\n        uint256 secondsToMaxMultiplier,\\n        uint256 lastUpdateTime\\n    );\\n    event RecoverToken(address indexed token, uint256 amount);\\n    event Stake(\\n        address indexed token,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 averageDepositTime,\\n        uint256 cumulativeBalance,\\n        uint256 tokenCumulativeStaked\\n    );\\n    event Unstake(\\n        address indexed token,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 remainingCumulativeBalance,\\n        uint256 tokenCumulativeStaked\\n    );\\n    event RewardsWithdrawn(\\n        address indexed token,\\n        address indexed user,\\n        uint256 rewardsToSend,\\n        uint256 tokenLastUpdateTime,\\n        uint256 tokenRewardPerTokenStored,\\n        uint256 userRewardsOutstanding,\\n        uint256 userRewardsPaidPerToken\\n    );\\n    event Exit(address indexed token, address indexed user, uint256 tokenCumulativeStaked);\\n\\n    /**************************************\\n     *          ADMIN FUNCTIONS           *\\n     **************************************/\\n\\n    /**\\n     * @notice Enable a token for staking.\\n     * @dev The owner should ensure that the token enabled is a standard ERC20 token to ensure correct functionality.\\n     * @param stakedToken The address of the token that can be staked.\\n     * @param enabled Whether the token is enabled for staking.\\n     * @param baseEmissionRate The base emission rate for staking the token. This is split pro-rata between all users.\\n     * @param maxMultiplier The maximum multiplier for staking which increases your rewards the longer you stake.\\n     * @param secondsToMaxMultiplier The number of seconds needed to stake to reach the maximum multiplier.\\n     */\\n    function configureStakingToken(\\n        address stakedToken,\\n        bool enabled,\\n        uint256 baseEmissionRate,\\n        uint256 maxMultiplier,\\n        uint256 secondsToMaxMultiplier\\n    ) external onlyOwner {\\n        // Validate input to ensure system stability and avoid unexpected behavior. Note we dont place a lower bound on\\n        // the baseEmissionRate. If this value is less than 1e18 then you will slowly loose your staking rewards over time.\\n        // Because of the way balances are managed, the staked token cannot be the reward token. Otherwise, reward\\n        // payouts could eat into user balances. We choose not to constrain `maxMultiplier` to be > 1e18 so that\\n        // admin can choose to allow decreasing emissions over time. This is not the intended use case, but we see no\\n        // benefit to removing this additional flexibility. If set < 1e18, then user's rewards outstanding will\\n        // decrease over time. Incentives for stakers would look different if `maxMultiplier` were set < 1e18\\n        require(stakedToken != address(rewardToken), \\\"Staked token is reward token\\\");\\n        require(maxMultiplier < 1e36, \\\"maxMultiplier can not be set too large\\\");\\n        require(secondsToMaxMultiplier > 0, \\\"secondsToMaxMultiplier must be greater than 0\\\");\\n        require(baseEmissionRate < 1e27, \\\"baseEmissionRate can not be set too large\\\");\\n\\n        StakingToken storage stakingToken = stakingTokens[stakedToken];\\n\\n        // If this token is already initialized, make sure we update the rewards before modifying any params.\\n        if (stakingToken.lastUpdateTime != 0) _updateReward(stakedToken, address(0));\\n\\n        stakingToken.enabled = enabled;\\n        stakingToken.baseEmissionRate = baseEmissionRate;\\n        stakingToken.maxMultiplier = maxMultiplier;\\n        stakingToken.secondsToMaxMultiplier = secondsToMaxMultiplier;\\n        stakingToken.lastUpdateTime = getCurrentTime();\\n\\n        emit TokenConfiguredForStaking(\\n            stakedToken,\\n            enabled,\\n            baseEmissionRate,\\n            maxMultiplier,\\n            secondsToMaxMultiplier,\\n            stakingToken.lastUpdateTime\\n        );\\n    }\\n\\n    /**\\n     * @notice Enables the owner to recover tokens dropped onto the contract. This could be used to remove unclaimed\\n     * staking rewards or recover excess LP tokens that were inadvertently dropped onto the contract. Importantly, the\\n     * contract will only let the owner recover staked excess tokens above what the contract thinks it should have. i.e\\n     * the owner cant use this method to steal staked tokens, only recover excess ones mistakenly sent to the contract.\\n     * @param token The address of the token to skim.\\n     */\\n    function recoverToken(address token) external onlyOwner {\\n        // If the token is an enabled staking token then we want to preform a skim action where we send back any extra\\n        // tokens that are not accounted for in the cumulativeStaked variable. This lets the owner recover extra tokens\\n        // sent to the contract that were not explicitly staked. if the token is not enabled for staking then we simply\\n        // send back the full amount of tokens that the contract has.\\n        uint256 amount = IERC20(token).balanceOf(address(this));\\n        if (stakingTokens[token].lastUpdateTime != 0) amount -= stakingTokens[token].cumulativeStaked;\\n        require(amount > 0, \\\"Can't recover 0 tokens\\\");\\n        IERC20(token).safeTransfer(owner(), amount);\\n        emit RecoverToken(token, amount);\\n    }\\n\\n    /**************************************\\n     *          STAKER FUNCTIONS          *\\n     **************************************/\\n\\n    /**\\n     * @notice Stake tokens for rewards.\\n     * @dev The caller of this function must approve this contract to spend amount of stakedToken.\\n     * @param stakedToken The address of the token to stake.\\n     * @param amount The amount of the token to stake.\\n     */\\n    function stake(address stakedToken, uint256 amount) external nonReentrant onlyEnabled(stakedToken) {\\n        _stake(stakedToken, amount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Stake tokens for rewards on behalf of `beneficiary`.\\n     * @dev The caller of this function must approve this contract to spend amount of stakedToken.\\n     * @dev The caller of this function is effectively donating their tokens to the beneficiary. The beneficiary\\n     * can then unstake or claim rewards as they wish.\\n     * @param stakedToken The address of the token to stake.\\n     * @param amount The amount of the token to stake.\\n     * @param beneficiary User that caller wants to stake on behalf of.\\n     */\\n    function stakeFor(\\n        address stakedToken,\\n        uint256 amount,\\n        address beneficiary\\n    ) external nonReentrant onlyEnabled(stakedToken) {\\n        _stake(stakedToken, amount, beneficiary);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens.\\n     * @param stakedToken The address of the token to withdraw.\\n     * @param amount The amount of the token to withdraw.\\n     */\\n    function unstake(address stakedToken, uint256 amount) public nonReentrant onlyInitialized(stakedToken) {\\n        _updateReward(stakedToken, msg.sender);\\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[msg.sender];\\n\\n        // Note: these will revert if underflow so you cant unstake more than your cumulativeBalance.\\n        userDeposit.cumulativeBalance -= amount;\\n        stakingTokens[stakedToken].cumulativeStaked -= amount;\\n\\n        IERC20(stakedToken).safeTransfer(msg.sender, amount);\\n\\n        emit Unstake(\\n            stakedToken,\\n            msg.sender,\\n            amount,\\n            userDeposit.cumulativeBalance,\\n            stakingTokens[stakedToken].cumulativeStaked\\n        );\\n    }\\n\\n    /**\\n     * @notice Get entitled rewards for the staker.\\n     * @dev Calling this method will reset the caller's reward multiplier.\\n     * @param stakedToken The address of the token to get rewards for.\\n     */\\n    function withdrawReward(address stakedToken) public nonReentrant onlyInitialized(stakedToken) {\\n        _updateReward(stakedToken, msg.sender);\\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[msg.sender];\\n\\n        uint256 rewardsToSend = userDeposit.rewardsOutstanding;\\n        if (rewardsToSend > 0) {\\n            userDeposit.rewardsOutstanding = 0;\\n            userDeposit.averageDepositTime = getCurrentTime();\\n            rewardToken.safeTransfer(msg.sender, rewardsToSend);\\n        }\\n\\n        emit RewardsWithdrawn(\\n            stakedToken,\\n            msg.sender,\\n            rewardsToSend,\\n            stakingTokens[stakedToken].lastUpdateTime,\\n            stakingTokens[stakedToken].rewardPerTokenStored,\\n            userDeposit.rewardsOutstanding,\\n            userDeposit.rewardsAccumulatedPerToken\\n        );\\n    }\\n\\n    /**\\n     * @notice Exits a staking position by unstaking and getting rewards. This totally exits the staking position.\\n     * @dev Calling this method will reset the caller's reward multiplier.\\n     * @param stakedToken The address of the token to get rewards for.\\n     */\\n    function exit(address stakedToken) external onlyInitialized(stakedToken) {\\n        _updateReward(stakedToken, msg.sender);\\n        unstake(stakedToken, stakingTokens[stakedToken].stakingBalances[msg.sender].cumulativeBalance);\\n        withdrawReward(stakedToken);\\n\\n        emit Exit(stakedToken, msg.sender, stakingTokens[stakedToken].cumulativeStaked);\\n    }\\n\\n    /**************************************\\n     *           VIEW FUNCTIONS           *\\n     **************************************/\\n\\n    /**\\n     * @notice Returns the total staked for a given stakedToken.\\n     * @param stakedToken The address of the staked token to query.\\n     * @return uint256 Total amount staked of the stakedToken.\\n     */\\n    function getCumulativeStaked(address stakedToken) external view returns (uint256) {\\n        return stakingTokens[stakedToken].cumulativeStaked;\\n    }\\n\\n    /**\\n     * @notice Returns all the information associated with a user's stake.\\n     * @param stakedToken The address of the staked token to query.\\n     * @param account The address of user to query.\\n     * @return UserDeposit Struct with: {cumulativeBalance,averageDepositTime,rewardsAccumulatedPerToken,rewardsOutstanding}\\n     */\\n    function getUserStake(address stakedToken, address account) external view returns (UserDeposit memory) {\\n        return stakingTokens[stakedToken].stakingBalances[account];\\n    }\\n\\n    /**\\n     * @notice Returns the base rewards per staked token for a given staking token. This factors in the last time\\n     * any internal logic was called on this contract to correctly attribute retroactive cumulative rewards.\\n     * @dev the value returned is represented by a uint256 with fixed precision of 18 decimals.\\n     * @param stakedToken The address of the staked token to query.\\n     * @return uint256 Total base reward per token that will be applied, pro-rata, to stakers.\\n     */\\n    function baseRewardPerToken(address stakedToken) public view returns (uint256) {\\n        StakingToken storage stakingToken = stakingTokens[stakedToken];\\n        if (stakingToken.cumulativeStaked == 0) return stakingToken.rewardPerTokenStored;\\n\\n        return\\n            stakingToken.rewardPerTokenStored +\\n            ((getCurrentTime() - stakingToken.lastUpdateTime) * stakingToken.baseEmissionRate * 1e18) /\\n            stakingToken.cumulativeStaked;\\n    }\\n\\n    /**\\n     * @notice Returns the multiplier applied to the base reward per staked token for a given staking token and account.\\n     * The longer a user stakes the higher their multiplier up to maxMultiplier for that given staking token.\\n     * any internal logic was called on this contract to correctly attribute retroactive cumulative rewards.\\n     * @dev the value returned is represented by a uint256 with fixed precision of 18 decimals.\\n     * @param stakedToken The address of the staked token to query.\\n     * @param account The address of the user to query.\\n     * @return uint256 User multiplier, applied to the baseRewardPerToken, when claiming rewards.\\n     */\\n    function getUserRewardMultiplier(address stakedToken, address account) public view returns (uint256) {\\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[account];\\n        if (userDeposit.averageDepositTime == 0 || userDeposit.cumulativeBalance == 0) return 1e18;\\n        uint256 fractionOfMaxMultiplier = ((getTimeSinceAverageDeposit(stakedToken, account)) * 1e18) /\\n            stakingTokens[stakedToken].secondsToMaxMultiplier;\\n\\n        // At maximum, the multiplier should be equal to the maxMultiplier.\\n        if (fractionOfMaxMultiplier > 1e18) fractionOfMaxMultiplier = 1e18;\\n        return 1e18 + (fractionOfMaxMultiplier * (stakingTokens[stakedToken].maxMultiplier - 1e18)) / (1e18);\\n    }\\n\\n    /**\\n     * @notice Returns the total outstanding rewards entitled to a user for a given staking token. This factors in the\\n     * users staking duration (and therefore reward multiplier) and their pro-rata share of the total rewards.\\n     * @param stakedToken The address of the staked token to query.\\n     * @param account The address of the user to query.\\n     * @return uint256 Total outstanding rewards entitled to user.\\n     */\\n    function getOutstandingRewards(address stakedToken, address account) public view returns (uint256) {\\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[account];\\n\\n        uint256 userRewardMultiplier = getUserRewardMultiplier(stakedToken, account);\\n\\n        uint256 newUserRewards = (userDeposit.cumulativeBalance *\\n            (baseRewardPerToken(stakedToken) - userDeposit.rewardsAccumulatedPerToken) *\\n            userRewardMultiplier) / (1e18 * 1e18);\\n\\n        return newUserRewards + userDeposit.rewardsOutstanding;\\n    }\\n\\n    /**\\n     * @notice Returns the time that has elapsed between the current time and the last users average deposit time.\\n     * @param stakedToken The address of the staked token to query.\\n     * @param account The address of the user to query.\\n     *@return uint256 Time, in seconds, between the users average deposit time and the current time.\\n     */\\n    function getTimeSinceAverageDeposit(address stakedToken, address account) public view returns (uint256) {\\n        return getCurrentTime() - stakingTokens[stakedToken].stakingBalances[account].averageDepositTime;\\n    }\\n\\n    /**\\n     * @notice Returns a users new average deposit time, considering the addition of a new deposit. This factors in the\\n     * cumulative previous deposits, new deposit and time from the last deposit.\\n     * @param stakedToken The address of the staked token to query.\\n     * @param account The address of the user to query.\\n     * @return uint256 Average post deposit time, considering all deposits to date.\\n     */\\n    function getAverageDepositTimePostDeposit(\\n        address stakedToken,\\n        address account,\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[account];\\n        if (amount == 0) return userDeposit.averageDepositTime;\\n        uint256 amountWeightedTime = (((amount * 1e18) / (userDeposit.cumulativeBalance + amount)) *\\n            (getTimeSinceAverageDeposit(stakedToken, account))) / 1e18;\\n        return userDeposit.averageDepositTime + amountWeightedTime;\\n    }\\n\\n    /**************************************\\n     *         INTERNAL FUNCTIONS         *\\n     **************************************/\\n\\n    // Update the internal counters for a given stakedToken and user.\\n    function _updateReward(address stakedToken, address account) internal {\\n        StakingToken storage stakingToken = stakingTokens[stakedToken];\\n        stakingToken.rewardPerTokenStored = baseRewardPerToken(stakedToken);\\n        stakingToken.lastUpdateTime = getCurrentTime();\\n        if (account != address(0)) {\\n            UserDeposit storage userDeposit = stakingToken.stakingBalances[account];\\n            userDeposit.rewardsOutstanding = getOutstandingRewards(stakedToken, account);\\n            userDeposit.rewardsAccumulatedPerToken = stakingToken.rewardPerTokenStored;\\n        }\\n    }\\n\\n    function _stake(\\n        address stakedToken,\\n        uint256 amount,\\n        address staker\\n    ) internal {\\n        _updateReward(stakedToken, staker);\\n\\n        UserDeposit storage userDeposit = stakingTokens[stakedToken].stakingBalances[staker];\\n\\n        uint256 averageDepositTime = getAverageDepositTimePostDeposit(stakedToken, staker, amount);\\n\\n        userDeposit.averageDepositTime = averageDepositTime;\\n        userDeposit.cumulativeBalance += amount;\\n        stakingTokens[stakedToken].cumulativeStaked += amount;\\n\\n        IERC20(stakedToken).safeTransferFrom(msg.sender, address(this), amount);\\n        emit Stake(\\n            stakedToken,\\n            staker,\\n            amount,\\n            averageDepositTime,\\n            userDeposit.cumulativeBalance,\\n            stakingTokens[stakedToken].cumulativeStaked\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xbc67be1719f5719497d5afe7a039bdcabe0a1af453e6dec683dc5a312df047de\",\"license\":\"GPL-3.0-only\"},\"contracts/ClaimAndStake.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport \\\"@across-protocol/contracts-v2/contracts/merkle-distributor/AcrossMerkleDistributor.sol\\\";\\nimport \\\"./AcceleratingDistributor.sol\\\";\\n\\n/**\\n * @notice Allows claimer to claim tokens from AcrossMerkleDistributor and stake into AcceleratingDistributor\\n * atomically in a single transaction. This intermediary contract also removes the need for claimer to approve\\n * AcceleratingDistributor to spend its staking tokens.\\n */\\n\\ncontract ClaimAndStake is ReentrancyGuard, Multicall {\\n    using SafeERC20 for IERC20;\\n\\n    // Contract which rewards tokens to users that they can then stake.\\n    AcrossMerkleDistributor public immutable merkleDistributor;\\n\\n    // Contract that user stakes claimed tokens into.\\n    AcceleratingDistributor public immutable acceleratingDistributor;\\n\\n    constructor(AcrossMerkleDistributor _merkleDistributor, AcceleratingDistributor _acceleratingDistributor) {\\n        merkleDistributor = _merkleDistributor;\\n        acceleratingDistributor = _acceleratingDistributor;\\n    }\\n\\n    /**************************************\\n     *          ADMIN FUNCTIONS           *\\n     **************************************/\\n\\n    /**\\n     * @notice Claim tokens from a MerkleDistributor contract and stake them for rewards in AcceleratingDistributor.\\n     * @dev Will revert if `merkleDistributor` is not set to valid MerkleDistributor contract.\\n     * @dev Will revert if the claim recipient account is not equal to caller, or if the reward token\\n     *      for claim is not a valid staking token.\\n     * @dev Will revert if this contract is not a \\\"whitelisted claimer\\\" on the MerkleDistributor contract.\\n     * @param _claim Claim leaf to retrieve from MerkleDistributor.\\n     */\\n    function claimAndStake(MerkleDistributorInterface.Claim memory _claim) external nonReentrant {\\n        require(_claim.account == msg.sender, \\\"claim account not caller\\\");\\n        address stakedToken = merkleDistributor.getRewardTokenForWindow(_claim.windowIndex);\\n        merkleDistributor.claimFor(_claim);\\n        IERC20(stakedToken).safeIncreaseAllowance(address(acceleratingDistributor), _claim.amount);\\n        acceleratingDistributor.stakeFor(stakedToken, _claim.amount, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b7fc229e5f9db68a5ce61c456d483258d30223212b4c1597e3c6975d0b8190\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161118d38038061118d83398101604081905261002f91610063565b60016000556001600160a01b039182166080521660a05261009d565b6001600160a01b038116811461006057600080fd5b50565b6000806040838503121561007657600080fd5b82516100818161004b565b60208401519092506100928161004b565b809150509250929050565b60805160a0516110b16100dc6000396000818160560152818161037b01526103f801526000818160dc0152818161023901526102f101526110b16000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063096116341461005157806365837fac146100a2578063ac9650d8146100b7578063f4537f78146100d7575b600080fd5b6100787f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100b56100b0366004610bc1565b6100fe565b005b6100ca6100c5366004610cc5565b61045f565b6040516100999190610da8565b6100787f000000000000000000000000000000000000000000000000000000000000000081565b60026000540361016f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055606081015173ffffffffffffffffffffffffffffffffffffffff1633146101f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f636c61696d206163636f756e74206e6f742063616c6c657200000000000000006044820152606401610166565b80516040517f761b429700000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163761b4297916102709160040190815260200190565b602060405180830381865afa15801561028d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b19190610e28565b6040517f88f038a200000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906388f038a290610326908590600401610e45565b600060405180830381600087803b15801561034057600080fd5b505af1158015610354573d6000803e3d6000fd5b50505060208301516103a0915073ffffffffffffffffffffffffffffffffffffffff8316907f000000000000000000000000000000000000000000000000000000000000000090610555565b60208201516040517f9b8f04b700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015260248201929092523360448201527f000000000000000000000000000000000000000000000000000000000000000090911690639b8f04b790606401600060405180830381600087803b15801561043e57600080fd5b505af1158015610452573d6000803e3d6000fd5b5050600160005550505050565b60608167ffffffffffffffff81111561047a5761047a610af5565b6040519080825280602002602001820160405280156104ad57816020015b60608152602001906001900390816104985790505b50905060005b8281101561054d5761051d308585848181106104d1576104d1610ed5565b90506020028101906104e39190610f04565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061069092505050565b82828151811061052f5761052f610ed5565b6020026020010181905250808061054590610f9f565b9150506104b3565b505b92915050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f09190610fd7565b6105fa9190610ff0565b6040805173ffffffffffffffffffffffffffffffffffffffff8616602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905290915061068a9085906106bc565b50505050565b60606106b58383604051806060016040528060278152602001611055602791396107cd565b9392505050565b600061071e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166108f59092919063ffffffff16565b8051909150156107c8578080602001905181019061073c9190611003565b6107c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610166565b505050565b606073ffffffffffffffffffffffffffffffffffffffff84163b610873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610166565b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161089b9190611025565b600060405180830381855af49150503d80600081146108d6576040519150601f19603f3d011682016040523d82523d6000602084013e6108db565b606091505b50915091506108eb82828661090c565b9695505050505050565b6060610904848460008561095f565b949350505050565b6060831561091b5750816106b5565b82511561092b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101669190611041565b6060824710156109f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610166565b73ffffffffffffffffffffffffffffffffffffffff85163b610a6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610166565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610a989190611025565b60006040518083038185875af1925050503d8060008114610ad5576040519150601f19603f3d011682016040523d82523d6000602084013e610ada565b606091505b5091509150610aea82828661090c565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715610b4757610b47610af5565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610b9457610b94610af5565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610bbe57600080fd5b50565b60006020808385031215610bd457600080fd5b823567ffffffffffffffff80821115610bec57600080fd5b9084019060a08287031215610c0057600080fd5b610c08610b24565b823581528383013584820152604083013560408201526060830135610c2c81610b9c565b6060820152608083013582811115610c4357600080fd5b80840193505086601f840112610c5857600080fd5b823582811115610c6a57610c6a610af5565b8060051b9250610c7b858401610b4d565b8181529284018501928581019089851115610c9557600080fd5b948601945b84861015610cb357853582529486019490860190610c9a565b60808401525090979650505050505050565b60008060208385031215610cd857600080fd5b823567ffffffffffffffff80821115610cf057600080fd5b818501915085601f830112610d0457600080fd5b813581811115610d1357600080fd5b8660208260051b8501011115610d2857600080fd5b60209290920196919550909350505050565b60005b83811015610d55578181015183820152602001610d3d565b50506000910152565b60008151808452610d76816020860160208601610d3a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610e1b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610e09858351610d5e565b94509285019290850190600101610dcf565b5092979650505050505050565b600060208284031215610e3a57600080fd5b81516106b581610b9c565b6000602080835260c083018451828501528185015160408501526040850151606085015273ffffffffffffffffffffffffffffffffffffffff6060860151166080850152608085015160a08086015281815180845260e0870191508483019350600092505b80831015610eca5783518252928401926001929092019190840190610eaa565b509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610f3957600080fd5b83018035915067ffffffffffffffff821115610f5457600080fd5b602001915036819003821315610f6957600080fd5b9250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610fd057610fd0610f70565b5060010190565b600060208284031215610fe957600080fd5b5051919050565b8082018082111561054f5761054f610f70565b60006020828403121561101557600080fd5b815180151581146106b557600080fd5b60008251611037818460208701610d3a565b9190910192915050565b6020815260006106b56020830184610d5e56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203281adf218ef4b2d43c377ea564b96bd1fea9bec6e607d56a2cb0d6bc4a9cddf64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063096116341461005157806365837fac146100a2578063ac9650d8146100b7578063f4537f78146100d7575b600080fd5b6100787f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100b56100b0366004610bc1565b6100fe565b005b6100ca6100c5366004610cc5565b61045f565b6040516100999190610da8565b6100787f000000000000000000000000000000000000000000000000000000000000000081565b60026000540361016f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055606081015173ffffffffffffffffffffffffffffffffffffffff1633146101f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f636c61696d206163636f756e74206e6f742063616c6c657200000000000000006044820152606401610166565b80516040517f761b429700000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163761b4297916102709160040190815260200190565b602060405180830381865afa15801561028d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b19190610e28565b6040517f88f038a200000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906388f038a290610326908590600401610e45565b600060405180830381600087803b15801561034057600080fd5b505af1158015610354573d6000803e3d6000fd5b50505060208301516103a0915073ffffffffffffffffffffffffffffffffffffffff8316907f000000000000000000000000000000000000000000000000000000000000000090610555565b60208201516040517f9b8f04b700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015260248201929092523360448201527f000000000000000000000000000000000000000000000000000000000000000090911690639b8f04b790606401600060405180830381600087803b15801561043e57600080fd5b505af1158015610452573d6000803e3d6000fd5b5050600160005550505050565b60608167ffffffffffffffff81111561047a5761047a610af5565b6040519080825280602002602001820160405280156104ad57816020015b60608152602001906001900390816104985790505b50905060005b8281101561054d5761051d308585848181106104d1576104d1610ed5565b90506020028101906104e39190610f04565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061069092505050565b82828151811061052f5761052f610ed5565b6020026020010181905250808061054590610f9f565b9150506104b3565b505b92915050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f09190610fd7565b6105fa9190610ff0565b6040805173ffffffffffffffffffffffffffffffffffffffff8616602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905290915061068a9085906106bc565b50505050565b60606106b58383604051806060016040528060278152602001611055602791396107cd565b9392505050565b600061071e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166108f59092919063ffffffff16565b8051909150156107c8578080602001905181019061073c9190611003565b6107c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610166565b505050565b606073ffffffffffffffffffffffffffffffffffffffff84163b610873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610166565b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161089b9190611025565b600060405180830381855af49150503d80600081146108d6576040519150601f19603f3d011682016040523d82523d6000602084013e6108db565b606091505b50915091506108eb82828661090c565b9695505050505050565b6060610904848460008561095f565b949350505050565b6060831561091b5750816106b5565b82511561092b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101669190611041565b6060824710156109f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610166565b73ffffffffffffffffffffffffffffffffffffffff85163b610a6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610166565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610a989190611025565b60006040518083038185875af1925050503d8060008114610ad5576040519150601f19603f3d011682016040523d82523d6000602084013e610ada565b606091505b5091509150610aea82828661090c565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715610b4757610b47610af5565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610b9457610b94610af5565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610bbe57600080fd5b50565b60006020808385031215610bd457600080fd5b823567ffffffffffffffff80821115610bec57600080fd5b9084019060a08287031215610c0057600080fd5b610c08610b24565b823581528383013584820152604083013560408201526060830135610c2c81610b9c565b6060820152608083013582811115610c4357600080fd5b80840193505086601f840112610c5857600080fd5b823582811115610c6a57610c6a610af5565b8060051b9250610c7b858401610b4d565b8181529284018501928581019089851115610c9557600080fd5b948601945b84861015610cb357853582529486019490860190610c9a565b60808401525090979650505050505050565b60008060208385031215610cd857600080fd5b823567ffffffffffffffff80821115610cf057600080fd5b818501915085601f830112610d0457600080fd5b813581811115610d1357600080fd5b8660208260051b8501011115610d2857600080fd5b60209290920196919550909350505050565b60005b83811015610d55578181015183820152602001610d3d565b50506000910152565b60008151808452610d76816020860160208601610d3a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610e1b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610e09858351610d5e565b94509285019290850190600101610dcf565b5092979650505050505050565b600060208284031215610e3a57600080fd5b81516106b581610b9c565b6000602080835260c083018451828501528185015160408501526040850151606085015273ffffffffffffffffffffffffffffffffffffffff6060860151166080850152608085015160a08086015281815180845260e0870191508483019350600092505b80831015610eca5783518252928401926001929092019190840190610eaa565b509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610f3957600080fd5b83018035915067ffffffffffffffff821115610f5457600080fd5b602001915036819003821315610f6957600080fd5b9250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610fd057610fd0610f70565b5060010190565b600060208284031215610fe957600080fd5b5051919050565b8082018082111561054f5761054f610f70565b60006020828403121561101557600080fd5b815180151581146106b557600080fd5b60008251611037818460208701610d3a565b9190910192915050565b6020815260006106b56020830184610d5e56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203281adf218ef4b2d43c377ea564b96bd1fea9bec6e607d56a2cb0d6bc4a9cddf64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimAndStake((uint256,uint256,uint256,address,bytes32[]))": {
        "details": "Will revert if `merkleDistributor` is not set to valid MerkleDistributor contract.Will revert if the claim recipient account is not equal to caller, or if the reward token      for claim is not a valid staking token.Will revert if this contract is not a \"whitelisted claimer\" on the MerkleDistributor contract.",
        "params": {
          "_claim": "Claim leaf to retrieve from MerkleDistributor."
        }
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimAndStake((uint256,uint256,uint256,address,bytes32[]))": {
        "notice": "Claim tokens from a MerkleDistributor contract and stake them for rewards in AcceleratingDistributor."
      }
    },
    "notice": "Allows claimer to claim tokens from AcrossMerkleDistributor and stake into AcceleratingDistributor atomically in a single transaction. This intermediary contract also removes the need for claimer to approve AcceleratingDistributor to spend its staking tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 303,
        "contract": "contracts/ClaimAndStake.sol:ClaimAndStake",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
