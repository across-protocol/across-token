{
  "address": "0xE50b2cEAC4f60E840Ae513924033E753e2366487",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "windowIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "ClaimFor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "windowIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "windowIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsDeposited",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "CreatedWindow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "windowIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "DeleteWindow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "whitelist",
          "type": "bool"
        }
      ],
      "name": "WhitelistedClaimer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "WithdrawRewards",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "windowIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accountIndex",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct MerkleDistributorInterface.Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "windowIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accountIndex",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct MerkleDistributorInterface.Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "claimFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "windowIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accountIndex",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct MerkleDistributorInterface.Claim[]",
          "name": "claims",
          "type": "tuple[]"
        }
      ],
      "name": "claimMulti",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowIndex",
          "type": "uint256"
        }
      ],
      "name": "deleteWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowIndex",
          "type": "uint256"
        }
      ],
      "name": "getRewardTokenForWindow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accountIndex",
          "type": "uint256"
        }
      ],
      "name": "isClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleWindows",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextCreatedIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardsToDeposit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        }
      ],
      "name": "setWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "windowIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accountIndex",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct MerkleDistributorInterface.Claim",
          "name": "_claim",
          "type": "tuple"
        }
      ],
      "name": "verifyClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newContract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "whitelist",
          "type": "bool"
        }
      ],
      "name": "whitelistClaimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedClaimers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "rewardCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x793bcac596391f99fa5040b2a798fb894dd93a3ae28c5219a7bebf922b5684c0",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0xE50b2cEAC4f60E840Ae513924033E753e2366487",
    "transactionIndex": 112,
    "gasUsed": "1673936",
    "logsBloom": "0x
    "blockHash": "0x39ba10c1a258d237420fedc063f8e1a504976ac32b2f89c406a468c88223e285",
    "transactionHash": "0x793bcac596391f99fa5040b2a798fb894dd93a3ae28c5219a7bebf922b5684c0",
    "logs": [
      {
        "transactionIndex": 112,
        "blockNumber": 15977130,
        "transactionHash": "0x793bcac596391f99fa5040b2a798fb894dd93a3ae28c5219a7bebf922b5684c0",
        "address": "0xE50b2cEAC4f60E840Ae513924033E753e2366487",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009a8f92a830a5cb89a3816e3d267cb7791c16b04d"
        ],
        "data": "0x",
        "logIndex": 159,
        "blockHash": "0x39ba10c1a258d237420fedc063f8e1a504976ac32b2f89c406a468c88223e285"
      }
    ],
    "blockNumber": 15977130,
    "cumulativeGasUsed": "9271311",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "17686732f199602ed40e6e94df0fb034",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"windowIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"ClaimFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"windowIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"windowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsDeposited\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CreatedWindow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"windowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DeleteWindow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"WhitelistedClaimer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"WithdrawRewards\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"windowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MerkleDistributorInterface.Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"windowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MerkleDistributorInterface.Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"windowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MerkleDistributorInterface.Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"claimMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowIndex\",\"type\":\"uint256\"}],\"name\":\"deleteWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowIndex\",\"type\":\"uint256\"}],\"name\":\"getRewardTokenForWindow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountIndex\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"merkleWindows\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCreatedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsToDeposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"setWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"windowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MerkleDistributorInterface.Claim\",\"name\":\"_claim\",\"type\":\"tuple\"}],\"name\":\"verifyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"whitelistClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedClaimers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim((uint256,uint256,uint256,address,bytes32[]))\":{\"details\":\"Claim recipient must be equal to msg.sender.\",\"params\":{\"_claim\":\"claim object describing amount, accountIndex, account, window index, and merkle proof.\"}},\"claimFor((uint256,uint256,uint256,address,bytes32[]))\":{\"details\":\"Caller must be in whitelistedClaimers struct set to \\\"true\\\".\",\"params\":{\"_claim\":\"leaf to claim.\"}},\"claimMulti((uint256,uint256,uint256,address,bytes32[])[])\":{\"details\":\"All claim recipients must be equal to msg.sender.\",\"params\":{\"claims\":\"array of claims to claim.\"}},\"deleteWindow(uint256)\":{\"details\":\"Callable only by owner. Likely to be followed by a withdrawRewards call to clear contract state.\",\"params\":{\"windowIndex\":\"merkle root index to delete.\"}},\"getRewardTokenForWindow(uint256)\":{\"params\":{\"windowIndex\":\"merkle root to check.\"},\"returns\":{\"_0\":\"address Reward token address\"}},\"isClaimed(uint256,uint256)\":{\"details\":\"This method will only work as intended if all `accountIndex`'s are unique for a given `windowIndex`.         The onus is on the Owner of this contract to submit only valid Merkle roots.\",\"params\":{\"accountIndex\":\"account index to check within window index.\",\"windowIndex\":\"merkle root to check.\"},\"returns\":{\"_0\":\"True if claim has been executed already, False otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setWindow(uint256,address,bytes32,string)\":{\"params\":{\"ipfsHash\":\"hash of IPFS object, conveniently stored for clients\",\"merkleRoot\":\"merkle root describing allocation.\",\"rewardToken\":\"ERC20 reward token.\",\"rewardsToDeposit\":\"amount of rewards to deposit to seed this allocation.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verifyClaim((uint256,uint256,uint256,address,bytes32[]))\":{\"params\":{\"_claim\":\"claim object describing amount, accountIndex, account, window index, and merkle proof.\"},\"returns\":{\"valid\":\"True if leaf exists.\"}},\"whitelistClaimer(address,bool)\":{\"details\":\"Callable only by owner.\",\"params\":{\"newContract\":\"Reset claimer contract to this address.\",\"whitelist\":\"True to whitelist claimer, False otherwise.\"}},\"withdrawRewards(address,uint256)\":{\"details\":\"Callable only by owner.\",\"params\":{\"amount\":\"amount of rewards to withdraw.\",\"rewardCurrency\":\"rewards to withdraw from contract.\"}}},\"title\":\"Extended MerkleDistributor contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim((uint256,uint256,uint256,address,bytes32[]))\":{\"notice\":\"Claim amount of reward tokens for account, as described by Claim input object.\"},\"claimFor((uint256,uint256,uint256,address,bytes32[]))\":{\"notice\":\"Executes merkle leaf claim on behaf of user. This can only be called by a trusted         claimer address. This function is designed to be called atomically with other transactions         that ultimately return the claimed amount to the rightful recipient. For example,         AcceleratingDistributor could call this function and then stake atomically on behalf of the user.\"},\"claimMulti((uint256,uint256,uint256,address,bytes32[])[])\":{\"notice\":\"Batch claims to reduce gas versus individual submitting all claims. Method will fail         if any individual claims within the batch would fail.\"},\"deleteWindow(uint256)\":{\"notice\":\"Delete merkle root at window index.\"},\"getRewardTokenForWindow(uint256)\":{\"notice\":\"Returns rewardToken set by admin for windowIndex.\"},\"isClaimed(uint256,uint256)\":{\"notice\":\"Returns True if the claim for `accountIndex` has already been completed for the Merkle root at         `windowIndex`.\"},\"setWindow(uint256,address,bytes32,string)\":{\"notice\":\"Set merkle root for the next available window index and seed allocations.Callable only by owner of this contract. Caller must have approved this contract to transfer      `rewardsToDeposit` amount of `rewardToken` or this call will fail. Importantly, we assume that the      owner of this contract correctly chooses an amount `rewardsToDeposit` that is sufficient to cover all      claims within the `merkleRoot`.\"},\"verifyClaim((uint256,uint256,uint256,address,bytes32[]))\":{\"notice\":\"Returns True if leaf described by {account, amount, accountIndex} is stored in Merkle root at given         window index.\"},\"whitelistClaimer(address,bool)\":{\"notice\":\"Updates whitelisted claimer status.\"},\"withdrawRewards(address,uint256)\":{\"notice\":\"Emergency method that transfers rewards out of the contract if the contract was configured improperly.\"}},\"notice\":\"Adds additional constraints governing who can claim leaves from merkle windows.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@across-protocol/contracts-v2/contracts/merkle-distributor/AcrossMerkleDistributor.sol\":\"AcrossMerkleDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@across-protocol/contracts-v2/contracts/merkle-distributor/AcrossMerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uma/core/contracts/merkle-distributor/implementation/MerkleDistributor.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title  Extended MerkleDistributor contract.\\n * @notice Adds additional constraints governing who can claim leaves from merkle windows.\\n */\\ncontract AcrossMerkleDistributor is MerkleDistributor {\\n    using SafeERC20 for IERC20;\\n\\n    // Addresses that can claim on user's behalf.\\n    mapping(address => bool) public whitelistedClaimers;\\n\\n    /****************************************\\n     *                EVENTS\\n     ****************************************/\\n    event WhitelistedClaimer(address indexed claimer, bool indexed whitelist);\\n    event ClaimFor(\\n        address indexed caller,\\n        uint256 windowIndex,\\n        address indexed account,\\n        uint256 accountIndex,\\n        uint256 amount,\\n        address indexed rewardToken\\n    );\\n\\n    /****************************\\n     *      ADMIN FUNCTIONS\\n     ****************************/\\n\\n    /**\\n     * @notice Updates whitelisted claimer status.\\n     * @dev Callable only by owner.\\n     * @param newContract Reset claimer contract to this address.\\n     * @param whitelist True to whitelist claimer, False otherwise.\\n     */\\n    function whitelistClaimer(address newContract, bool whitelist) external onlyOwner {\\n        whitelistedClaimers[newContract] = whitelist;\\n        emit WhitelistedClaimer(newContract, whitelist);\\n    }\\n\\n    /****************************\\n     *    NON-ADMIN FUNCTIONS\\n     ****************************/\\n\\n    /**\\n     * @notice Batch claims to reduce gas versus individual submitting all claims. Method will fail\\n     *         if any individual claims within the batch would fail.\\n     * @dev    All claim recipients must be equal to msg.sender.\\n     * @param claims array of claims to claim.\\n     */\\n    function claimMulti(Claim[] memory claims) public override {\\n        uint256 claimCount = claims.length;\\n        for (uint256 i = 0; i < claimCount; i++) {\\n            require(claims[i].account == msg.sender, \\\"invalid claimer\\\");\\n        }\\n        super.claimMulti(claims);\\n    }\\n\\n    /**\\n     * @notice Claim amount of reward tokens for account, as described by Claim input object.\\n     * @dev    Claim recipient must be equal to msg.sender.\\n     * @param _claim claim object describing amount, accountIndex, account, window index, and merkle proof.\\n     */\\n    function claim(Claim memory _claim) public override {\\n        require(_claim.account == msg.sender, \\\"invalid claimer\\\");\\n        super.claim(_claim);\\n    }\\n\\n    /**\\n     * @notice Executes merkle leaf claim on behaf of user. This can only be called by a trusted\\n     *         claimer address. This function is designed to be called atomically with other transactions\\n     *         that ultimately return the claimed amount to the rightful recipient. For example,\\n     *         AcceleratingDistributor could call this function and then stake atomically on behalf of the user.\\n     * @dev    Caller must be in whitelistedClaimers struct set to \\\"true\\\".\\n     * @param _claim leaf to claim.\\n     */\\n\\n    function claimFor(Claim memory _claim) public {\\n        require(whitelistedClaimers[msg.sender], \\\"unwhitelisted claimer\\\");\\n        _verifyAndMarkClaimed(_claim);\\n        merkleWindows[_claim.windowIndex].rewardToken.safeTransfer(msg.sender, _claim.amount);\\n        emit ClaimFor(\\n            msg.sender,\\n            _claim.windowIndex,\\n            _claim.account,\\n            _claim.accountIndex,\\n            _claim.amount,\\n            address(merkleWindows[_claim.windowIndex].rewardToken)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x770e7f0986351870b1223a1214aaa3084b7cba9f438d7906c62c016ebd11b2c3\",\"license\":\"AGPL-3.0-only\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@uma/core/contracts/merkle-distributor/implementation/MerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./MerkleDistributorInterface.sol\\\";\\n\\n/**\\n * Inspired by:\\n * - https://github.com/pie-dao/vested-token-migration-app\\n * - https://github.com/Uniswap/merkle-distributor\\n * - https://github.com/balancer-labs/erc20-redeemable\\n *\\n * @title  MerkleDistributor contract.\\n * @notice Allows an owner to distribute any reward ERC20 to claimants according to Merkle roots. The owner can specify\\n *         multiple Merkle roots distributions with customized reward currencies.\\n * @dev    The Merkle trees are not validated in any way, so the system assumes the contract owner behaves honestly.\\n */\\ncontract MerkleDistributor is MerkleDistributorInterface, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    // Windows are mapped to arbitrary indices.\\n    mapping(uint256 => Window) public merkleWindows;\\n\\n    // Index of next created Merkle root.\\n    uint256 public nextCreatedIndex;\\n\\n    // Track which accounts have claimed for each window index.\\n    // Note: uses a packed array of bools for gas optimization on tracking certain claims. Copied from Uniswap's contract.\\n    mapping(uint256 => mapping(uint256 => uint256)) private claimedBitMap;\\n\\n    /****************************************\\n     *                EVENTS\\n     ****************************************/\\n    event Claimed(\\n        address indexed caller,\\n        uint256 windowIndex,\\n        address indexed account,\\n        uint256 accountIndex,\\n        uint256 amount,\\n        address indexed rewardToken\\n    );\\n    event CreatedWindow(\\n        uint256 indexed windowIndex,\\n        uint256 rewardsDeposited,\\n        address indexed rewardToken,\\n        address owner\\n    );\\n    event WithdrawRewards(address indexed owner, uint256 amount, address indexed currency);\\n    event DeleteWindow(uint256 indexed windowIndex, address owner);\\n\\n    /****************************\\n     *      ADMIN FUNCTIONS\\n     ****************************/\\n\\n    /**\\n     * @notice Set merkle root for the next available window index and seed allocations.\\n     * @notice Callable only by owner of this contract. Caller must have approved this contract to transfer\\n     *      `rewardsToDeposit` amount of `rewardToken` or this call will fail. Importantly, we assume that the\\n     *      owner of this contract correctly chooses an amount `rewardsToDeposit` that is sufficient to cover all\\n     *      claims within the `merkleRoot`.\\n     * @param rewardsToDeposit amount of rewards to deposit to seed this allocation.\\n     * @param rewardToken ERC20 reward token.\\n     * @param merkleRoot merkle root describing allocation.\\n     * @param ipfsHash hash of IPFS object, conveniently stored for clients\\n     */\\n    function setWindow(\\n        uint256 rewardsToDeposit,\\n        address rewardToken,\\n        bytes32 merkleRoot,\\n        string calldata ipfsHash\\n    ) external onlyOwner {\\n        uint256 indexToSet = nextCreatedIndex;\\n        nextCreatedIndex = indexToSet + 1;\\n\\n        _setWindow(indexToSet, rewardsToDeposit, rewardToken, merkleRoot, ipfsHash);\\n    }\\n\\n    /**\\n     * @notice Delete merkle root at window index.\\n     * @dev Callable only by owner. Likely to be followed by a withdrawRewards call to clear contract state.\\n     * @param windowIndex merkle root index to delete.\\n     */\\n    function deleteWindow(uint256 windowIndex) external onlyOwner {\\n        delete merkleWindows[windowIndex];\\n        emit DeleteWindow(windowIndex, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Emergency method that transfers rewards out of the contract if the contract was configured improperly.\\n     * @dev Callable only by owner.\\n     * @param rewardCurrency rewards to withdraw from contract.\\n     * @param amount amount of rewards to withdraw.\\n     */\\n    function withdrawRewards(IERC20 rewardCurrency, uint256 amount) external onlyOwner {\\n        rewardCurrency.safeTransfer(msg.sender, amount);\\n        emit WithdrawRewards(msg.sender, amount, address(rewardCurrency));\\n    }\\n\\n    /****************************\\n     *    NON-ADMIN FUNCTIONS\\n     ****************************/\\n\\n    /**\\n     * @notice Batch claims to reduce gas versus individual submitting all claims. Method will fail\\n     *         if any individual claims within the batch would fail.\\n     * @dev    Optimistically tries to batch together consecutive claims for the same account and same\\n     *         reward token to reduce gas. Therefore, the most gas-cost-optimal way to use this method\\n     *         is to pass in an array of claims sorted by account and reward currency. It also reverts\\n     *         when any of individual `_claim`'s `amount` exceeds `remainingAmount` for its window.\\n     * @param claims array of claims to claim.\\n     */\\n    function claimMulti(Claim[] memory claims) public virtual override {\\n        uint256 batchedAmount;\\n        uint256 claimCount = claims.length;\\n        for (uint256 i = 0; i < claimCount; i++) {\\n            Claim memory _claim = claims[i];\\n            _verifyAndMarkClaimed(_claim);\\n            batchedAmount += _claim.amount;\\n\\n            // If the next claim is NOT the same account or the same token (or this claim is the last one),\\n            // then disburse the `batchedAmount` to the current claim's account for the current claim's reward token.\\n            uint256 nextI = i + 1;\\n            IERC20 currentRewardToken = merkleWindows[_claim.windowIndex].rewardToken;\\n            if (\\n                nextI == claimCount ||\\n                // This claim is last claim.\\n                claims[nextI].account != _claim.account ||\\n                // Next claim account is different than current one.\\n                merkleWindows[claims[nextI].windowIndex].rewardToken != currentRewardToken\\n                // Next claim reward token is different than current one.\\n            ) {\\n                currentRewardToken.safeTransfer(_claim.account, batchedAmount);\\n                batchedAmount = 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim amount of reward tokens for account, as described by Claim input object.\\n     * @dev    If the `_claim`'s `amount`, `accountIndex`, and `account` do not exactly match the\\n     *         values stored in the merkle root for the `_claim`'s `windowIndex` this method\\n     *         will revert. It also reverts when `_claim`'s `amount` exceeds `remainingAmount` for the window.\\n     * @param _claim claim object describing amount, accountIndex, account, window index, and merkle proof.\\n     */\\n    function claim(Claim memory _claim) public virtual override {\\n        _verifyAndMarkClaimed(_claim);\\n        merkleWindows[_claim.windowIndex].rewardToken.safeTransfer(_claim.account, _claim.amount);\\n    }\\n\\n    /**\\n     * @notice Returns True if the claim for `accountIndex` has already been completed for the Merkle root at\\n     *         `windowIndex`.\\n     * @dev    This method will only work as intended if all `accountIndex`'s are unique for a given `windowIndex`.\\n     *         The onus is on the Owner of this contract to submit only valid Merkle roots.\\n     * @param windowIndex merkle root to check.\\n     * @param accountIndex account index to check within window index.\\n     * @return True if claim has been executed already, False otherwise.\\n     */\\n    function isClaimed(uint256 windowIndex, uint256 accountIndex) public view returns (bool) {\\n        uint256 claimedWordIndex = accountIndex / 256;\\n        uint256 claimedBitIndex = accountIndex % 256;\\n        uint256 claimedWord = claimedBitMap[windowIndex][claimedWordIndex];\\n        uint256 mask = (1 << claimedBitIndex);\\n        return claimedWord & mask == mask;\\n    }\\n\\n    /**\\n     * @notice Returns rewardToken set by admin for windowIndex.\\n     * @param windowIndex merkle root to check.\\n     * @return address Reward token address\\n     */\\n    function getRewardTokenForWindow(uint256 windowIndex) public view override returns (address) {\\n        return address(merkleWindows[windowIndex].rewardToken);\\n    }\\n\\n    /**\\n     * @notice Returns True if leaf described by {account, amount, accountIndex} is stored in Merkle root at given\\n     *         window index.\\n     * @param _claim claim object describing amount, accountIndex, account, window index, and merkle proof.\\n     * @return valid True if leaf exists.\\n     */\\n    function verifyClaim(Claim memory _claim) public view returns (bool valid) {\\n        bytes32 leaf = keccak256(abi.encodePacked(_claim.account, _claim.amount, _claim.accountIndex));\\n        return MerkleProof.verify(_claim.merkleProof, merkleWindows[_claim.windowIndex].merkleRoot, leaf);\\n    }\\n\\n    /****************************\\n     *     PRIVATE FUNCTIONS\\n     ****************************/\\n\\n    // Mark claim as completed for `accountIndex` for Merkle root at `windowIndex`.\\n    function _setClaimed(uint256 windowIndex, uint256 accountIndex) private {\\n        uint256 claimedWordIndex = accountIndex / 256;\\n        uint256 claimedBitIndex = accountIndex % 256;\\n        claimedBitMap[windowIndex][claimedWordIndex] =\\n            claimedBitMap[windowIndex][claimedWordIndex] |\\n            (1 << claimedBitIndex);\\n    }\\n\\n    // Store new Merkle root at `windowindex`. Pull `rewardsDeposited` from caller to seed distribution for this root.\\n    function _setWindow(\\n        uint256 windowIndex,\\n        uint256 rewardsDeposited,\\n        address rewardToken,\\n        bytes32 merkleRoot,\\n        string memory ipfsHash\\n    ) private {\\n        Window storage window = merkleWindows[windowIndex];\\n        window.merkleRoot = merkleRoot;\\n        window.remainingAmount = rewardsDeposited;\\n        window.rewardToken = IERC20(rewardToken);\\n        window.ipfsHash = ipfsHash;\\n\\n        emit CreatedWindow(windowIndex, rewardsDeposited, rewardToken, msg.sender);\\n\\n        window.rewardToken.safeTransferFrom(msg.sender, address(this), rewardsDeposited);\\n    }\\n\\n    // Verify claim is valid and mark it as completed in this contract.\\n    function _verifyAndMarkClaimed(Claim memory _claim) internal {\\n        // Check claimed proof against merkle window at given index.\\n        require(verifyClaim(_claim), \\\"Incorrect merkle proof\\\");\\n        // Check the account has not yet claimed for this window.\\n        require(!isClaimed(_claim.windowIndex, _claim.accountIndex), \\\"Account has already claimed for this window\\\");\\n\\n        // Proof is correct and claim has not occurred yet, mark claimed complete.\\n        _setClaimed(_claim.windowIndex, _claim.accountIndex);\\n        merkleWindows[_claim.windowIndex].remainingAmount -= _claim.amount;\\n        emit Claimed(\\n            msg.sender,\\n            _claim.windowIndex,\\n            _claim.account,\\n            _claim.accountIndex,\\n            _claim.amount,\\n            address(merkleWindows[_claim.windowIndex].rewardToken)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x45ba14976c04b585ff82098ef0340ae062d9da7a3a2076b2535dbd194d254fc7\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/merkle-distributor/implementation/MerkleDistributorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Concise list of functions in MerkleDistributor implementation that would be called by\\n * a consuming external contract (such as the Across Protocol's AcceleratingDistributor).\\n */\\ninterface MerkleDistributorInterface {\\n    // A Window maps a Merkle root to a reward token address.\\n    struct Window {\\n        // Merkle root describing the distribution.\\n        bytes32 merkleRoot;\\n        // Remaining amount of deposited rewards that have not yet been claimed.\\n        uint256 remainingAmount;\\n        // Currency in which reward is processed.\\n        IERC20 rewardToken;\\n        // IPFS hash of the merkle tree. Can be used to independently fetch recipient proofs and tree. Note that the canonical\\n        // data type for storing an IPFS hash is a multihash which is the concatenation of  <varint hash function code>\\n        // <varint digest size in bytes><hash function output>. We opted to store this in a string type to make it easier\\n        // for users to query the ipfs data without needing to reconstruct the multihash. to view the IPFS data simply\\n        // go to https://cloudflare-ipfs.com/ipfs/<IPFS-HASH>.\\n        string ipfsHash;\\n    }\\n\\n    // Represents an account's claim for `amount` within the Merkle root located at the `windowIndex`.\\n    struct Claim {\\n        uint256 windowIndex;\\n        uint256 amount;\\n        uint256 accountIndex; // Used only for bitmap. Assumed to be unique for each claim.\\n        address account;\\n        bytes32[] merkleProof;\\n    }\\n\\n    function claim(Claim memory _claim) external;\\n\\n    function claimMulti(Claim[] memory claims) external;\\n\\n    function getRewardTokenForWindow(uint256 windowIndex) external view returns (address);\\n}\\n\",\"keccak256\":\"0x0d6527f44b268c3801d45bc1fc6021f22a80070a21d4066430a4d6566e3ff5e7\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611d048061007e6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063d6ef7af011610066578063d6ef7af01461026b578063e2e441a31461027e578063f2fde38b14610295578063f364c90c146102a857600080fd5b80638da5cb5b146102145780639f5a967214610232578063a198496c14610245578063d45118681461025857600080fd5b8063743817a0116100d3578063743817a01461016d578063761b42971461018057806388f038a2146101de578063891b0d71146101f157600080fd5b80634f512151146101055780636be651791461012d57806370b53aee14610142578063715018a614610165575b600080fd5b6101186101133660046116c2565b6102bb565b60405190151581526020015b60405180910390f35b61014061013b3660046116f7565b610377565b005b6101186101503660046117a8565b60046020526000908152604090205460ff1681565b61014061045b565b61014061017b3660046117d3565b61046f565b6101b961018e36600461180c565b60009081526001602052604090206002015473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610124565b6101406101ec3660046116c2565b6104f6565b6102046101ff36600461180c565b61063e565b6040516101249493929190611893565b60005473ffffffffffffffffffffffffffffffffffffffff166101b9565b61014061024036600461180c565b610707565b6101406102533660046116c2565b61079a565b6101406102663660046118d8565b610829565b61014061027936600461196e565b610890565b61028760025481565b604051908152602001610124565b6101406102a33660046117a8565b61090a565b6101186102b636600461199a565b6109be565b6000808260600151836020015184604001516040516020016103179392919060609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001683526014830191909152603482015260540190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181528151602092830120608086015186516000908152600190945291909220549192506103709183610a0e565b9392505050565b805160005b8181101561044d573373ffffffffffffffffffffffffffffffffffffffff168382815181106103ad576103ad6119bc565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff161461043b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f696e76616c696420636c61696d6572000000000000000000000000000000000060448201526064015b60405180910390fd5b8061044581611a1a565b91505061037c565b5061045782610a24565b5050565b610463610bb8565b61046d6000610c39565b565b610477610bb8565b73ffffffffffffffffffffffffffffffffffffffff821660008181526004602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917fbaa2323ab54d3ecd5bd63d3c3cfc23d7ef896edcbc927b7b7867407f32a3ba2991a35050565b3360009081526004602052604090205460ff1661056f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f756e77686974656c697374656420636c61696d657200000000000000000000006044820152606401610432565b61057881610cae565b6020808201518251600090815260019092526040909120600201546105b79173ffffffffffffffffffffffffffffffffffffffff909116903390610e81565b805160009081526001602090815260409182902060020154606080850151855185870151858801518751928352958201529485019390935273ffffffffffffffffffffffffffffffffffffffff91821693919092169133917fcfb930b6b49765485460cb1c6853ec3437a78b18d8c9a25b9fed2eea3b6756a991015b60405180910390a450565b60016020819052600091825260409091208054918101546002820154600383018054929373ffffffffffffffffffffffffffffffffffffffff9092169261068490611a52565b80601f01602080910402602001604051908101604052809291908181526020018280546106b090611a52565b80156106fd5780601f106106d2576101008083540402835291602001916106fd565b820191906000526020600020905b8154815290600101906020018083116106e057829003601f168201915b5050505050905084565b61070f610bb8565b600081815260016020819052604082208281559081018290556002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690559061076060038301826114b5565b505060405133815281907f8fea52000ecb40f2262c672496dfadccc9d6290439bac487e084de8c57682d669060200160405180910390a250565b606081015173ffffffffffffffffffffffffffffffffffffffff16331461081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f696e76616c696420636c61696d657200000000000000000000000000000000006044820152606401610432565b61082681610f5a565b50565b610831610bb8565b60025461083f816001611aa5565b6002819055506108888187878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fa592505050565b505050505050565b610898610bb8565b6108b973ffffffffffffffffffffffffffffffffffffffff83163383610e81565b60405181815273ffffffffffffffffffffffffffffffffffffffff83169033907ffb0872526787ac1be379aa37eaa9913b47d6d50c3f5fe5ec67ffe4282493670e9060200160405180910390a35050565b610912610bb8565b73ffffffffffffffffffffffffffffffffffffffff81166109b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610432565b61082681610c39565b6000806109cd61010084611ae7565b905060006109dd61010085611afb565b60008681526003602090815260408083209583529490529290922054600190921b9182169091149150505b92915050565b600082610a1b8584611089565b14949350505050565b8051600090815b81811015610bb2576000848281518110610a4757610a476119bc565b60200260200101519050610a5a81610cae565b6020810151610a699085611aa5565b93506000610a78836001611aa5565b825160009081526001602052604090206002015490915073ffffffffffffffffffffffffffffffffffffffff1684821480610b005750826060015173ffffffffffffffffffffffffffffffffffffffff16878381518110610adb57610adb6119bc565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1614155b80610b6b57508073ffffffffffffffffffffffffffffffffffffffff1660016000898581518110610b3357610b336119bc565b6020908102919091018101515182528101919091526040016000206002015473ffffffffffffffffffffffffffffffffffffffff1614155b15610b9c576060830151610b979073ffffffffffffffffffffffffffffffffffffffff83169088610e81565b600095505b5050508080610baa90611a1a565b915050610a2b565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461046d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610432565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610cb7816102bb565b610d1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e636f7272656374206d65726b6c652070726f6f66000000000000000000006044820152606401610432565b610d2f816000015182604001516109be565b15610dbc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4163636f756e742068617320616c726561647920636c61696d656420666f722060448201527f746869732077696e646f770000000000000000000000000000000000000000006064820152608401610432565b610dce816000015182604001516110d6565b806020015160016000836000015181526020019081526020016000206001016000828254610dfc9190611b0f565b9091555050805160009081526001602090815260409182902060020154606080850151855185870151858801518751928352958201529485019390935273ffffffffffffffffffffffffffffffffffffffff91821693919092169133917f18bdb6adb84039f917775d1fb8e7b7e7737ad5915d12eef0e4654b85e18d07b49101610633565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610f559084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261111f565b505050565b610f6381610cae565b60608101516020808301518351600090815260019092526040909120600201546108269273ffffffffffffffffffffffffffffffffffffffff90911691610e81565b60008581526001602081905260409091208381559081018590556002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790556003810161100f8382611b68565b506040805186815233602082015273ffffffffffffffffffffffffffffffffffffffff86169188917f521fe5bce65ac6af752c1083ec77facc5b6c13f40693e96eeca3747726fee9ad910160405180910390a360028101546108889073ffffffffffffffffffffffffffffffffffffffff1633308861122b565b600081815b84518110156110ce576110ba828683815181106110ad576110ad6119bc565b6020026020010151611289565b9150806110c681611a1a565b91505061108e565b509392505050565b60006110e461010083611ae7565b905060006110f461010084611afb565b6000948552600360209081526040808720948752939052919093208054600190921b90911790555050565b6000611181826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112b59092919063ffffffff16565b805190915015610f55578080602001905181019061119f9190611c82565b610f55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610432565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610bb29085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610ed3565b60008183106112a5576000828152602084905260409020610370565b5060009182526020526040902090565b60606112c484846000856112cc565b949350505050565b60608247101561135e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610432565b73ffffffffffffffffffffffffffffffffffffffff85163b6113dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610432565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516114059190611c9f565b60006040518083038185875af1925050503d8060008114611442576040519150601f19603f3d011682016040523d82523d6000602084013e611447565b606091505b5091509150611457828286611462565b979650505050505050565b60608315611471575081610370565b8251156114815782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104329190611cbb565b5080546114c190611a52565b6000825580601f106114d1575050565b601f01602090049060005260206000209081019061082691905b808211156114ff57600081556001016114eb565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561155557611555611503565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156115a2576115a2611503565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461082657600080fd5b600067ffffffffffffffff8211156115e6576115e6611503565b5060051b60200190565b600060a0828403121561160257600080fd5b61160a611532565b90508135815260208083013581830152604083013560408301526060830135611632816115aa565b6060830152608083013567ffffffffffffffff81111561165157600080fd5b8301601f8101851361166257600080fd5b8035611675611670826115cc565b61155b565b81815260059190911b8201830190838101908783111561169457600080fd5b928401925b828410156116b257833582529284019290840190611699565b6080860152509295945050505050565b6000602082840312156116d457600080fd5b813567ffffffffffffffff8111156116eb57600080fd5b6112c4848285016115f0565b6000602080838503121561170a57600080fd5b823567ffffffffffffffff8082111561172257600080fd5b818501915085601f83011261173657600080fd5b8135611744611670826115cc565b81815260059190911b8301840190848101908883111561176357600080fd5b8585015b8381101561179b5780358581111561177f5760008081fd5b61178d8b89838a01016115f0565b845250918601918601611767565b5098975050505050505050565b6000602082840312156117ba57600080fd5b8135610370816115aa565b801515811461082657600080fd5b600080604083850312156117e657600080fd5b82356117f1816115aa565b91506020830135611801816117c5565b809150509250929050565b60006020828403121561181e57600080fd5b5035919050565b60005b83811015611840578181015183820152602001611828565b50506000910152565b60008151808452611861816020860160208601611825565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff831660408201526080606082015260006118ce6080830184611849565b9695505050505050565b6000806000806000608086880312156118f057600080fd5b853594506020860135611902816115aa565b935060408601359250606086013567ffffffffffffffff8082111561192657600080fd5b818801915088601f83011261193a57600080fd5b81358181111561194957600080fd5b89602082850101111561195b57600080fd5b9699959850939650602001949392505050565b6000806040838503121561198157600080fd5b823561198c816115aa565b946020939093013593505050565b600080604083850312156119ad57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a4b57611a4b6119eb565b5060010190565b600181811c90821680611a6657607f821691505b602082108103611a9f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b80820180821115610a0857610a086119eb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611af657611af6611ab8565b500490565b600082611b0a57611b0a611ab8565b500690565b81810381811115610a0857610a086119eb565b601f821115610f5557600081815260208120601f850160051c81016020861015611b495750805b601f850160051c820191505b8181101561088857828155600101611b55565b815167ffffffffffffffff811115611b8257611b82611503565b611b9681611b908454611a52565b84611b22565b602080601f831160018114611be95760008415611bb35750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610888565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015611c3657888601518255948401946001909101908401611c17565b5085821015611c7257878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215611c9457600080fd5b8151610370816117c5565b60008251611cb1818460208701611825565b9190910192915050565b602081526000610370602083018461184956fea264697066735822122016c92f86d2815d5a69fb0146bd5085692389c02daebd3b98eb9b5b653d3ad56264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063d6ef7af011610066578063d6ef7af01461026b578063e2e441a31461027e578063f2fde38b14610295578063f364c90c146102a857600080fd5b80638da5cb5b146102145780639f5a967214610232578063a198496c14610245578063d45118681461025857600080fd5b8063743817a0116100d3578063743817a01461016d578063761b42971461018057806388f038a2146101de578063891b0d71146101f157600080fd5b80634f512151146101055780636be651791461012d57806370b53aee14610142578063715018a614610165575b600080fd5b6101186101133660046116c2565b6102bb565b60405190151581526020015b60405180910390f35b61014061013b3660046116f7565b610377565b005b6101186101503660046117a8565b60046020526000908152604090205460ff1681565b61014061045b565b61014061017b3660046117d3565b61046f565b6101b961018e36600461180c565b60009081526001602052604090206002015473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610124565b6101406101ec3660046116c2565b6104f6565b6102046101ff36600461180c565b61063e565b6040516101249493929190611893565b60005473ffffffffffffffffffffffffffffffffffffffff166101b9565b61014061024036600461180c565b610707565b6101406102533660046116c2565b61079a565b6101406102663660046118d8565b610829565b61014061027936600461196e565b610890565b61028760025481565b604051908152602001610124565b6101406102a33660046117a8565b61090a565b6101186102b636600461199a565b6109be565b6000808260600151836020015184604001516040516020016103179392919060609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001683526014830191909152603482015260540190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181528151602092830120608086015186516000908152600190945291909220549192506103709183610a0e565b9392505050565b805160005b8181101561044d573373ffffffffffffffffffffffffffffffffffffffff168382815181106103ad576103ad6119bc565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff161461043b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f696e76616c696420636c61696d6572000000000000000000000000000000000060448201526064015b60405180910390fd5b8061044581611a1a565b91505061037c565b5061045782610a24565b5050565b610463610bb8565b61046d6000610c39565b565b610477610bb8565b73ffffffffffffffffffffffffffffffffffffffff821660008181526004602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917fbaa2323ab54d3ecd5bd63d3c3cfc23d7ef896edcbc927b7b7867407f32a3ba2991a35050565b3360009081526004602052604090205460ff1661056f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f756e77686974656c697374656420636c61696d657200000000000000000000006044820152606401610432565b61057881610cae565b6020808201518251600090815260019092526040909120600201546105b79173ffffffffffffffffffffffffffffffffffffffff909116903390610e81565b805160009081526001602090815260409182902060020154606080850151855185870151858801518751928352958201529485019390935273ffffffffffffffffffffffffffffffffffffffff91821693919092169133917fcfb930b6b49765485460cb1c6853ec3437a78b18d8c9a25b9fed2eea3b6756a991015b60405180910390a450565b60016020819052600091825260409091208054918101546002820154600383018054929373ffffffffffffffffffffffffffffffffffffffff9092169261068490611a52565b80601f01602080910402602001604051908101604052809291908181526020018280546106b090611a52565b80156106fd5780601f106106d2576101008083540402835291602001916106fd565b820191906000526020600020905b8154815290600101906020018083116106e057829003601f168201915b5050505050905084565b61070f610bb8565b600081815260016020819052604082208281559081018290556002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690559061076060038301826114b5565b505060405133815281907f8fea52000ecb40f2262c672496dfadccc9d6290439bac487e084de8c57682d669060200160405180910390a250565b606081015173ffffffffffffffffffffffffffffffffffffffff16331461081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f696e76616c696420636c61696d657200000000000000000000000000000000006044820152606401610432565b61082681610f5a565b50565b610831610bb8565b60025461083f816001611aa5565b6002819055506108888187878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fa592505050565b505050505050565b610898610bb8565b6108b973ffffffffffffffffffffffffffffffffffffffff83163383610e81565b60405181815273ffffffffffffffffffffffffffffffffffffffff83169033907ffb0872526787ac1be379aa37eaa9913b47d6d50c3f5fe5ec67ffe4282493670e9060200160405180910390a35050565b610912610bb8565b73ffffffffffffffffffffffffffffffffffffffff81166109b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610432565b61082681610c39565b6000806109cd61010084611ae7565b905060006109dd61010085611afb565b60008681526003602090815260408083209583529490529290922054600190921b9182169091149150505b92915050565b600082610a1b8584611089565b14949350505050565b8051600090815b81811015610bb2576000848281518110610a4757610a476119bc565b60200260200101519050610a5a81610cae565b6020810151610a699085611aa5565b93506000610a78836001611aa5565b825160009081526001602052604090206002015490915073ffffffffffffffffffffffffffffffffffffffff1684821480610b005750826060015173ffffffffffffffffffffffffffffffffffffffff16878381518110610adb57610adb6119bc565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1614155b80610b6b57508073ffffffffffffffffffffffffffffffffffffffff1660016000898581518110610b3357610b336119bc565b6020908102919091018101515182528101919091526040016000206002015473ffffffffffffffffffffffffffffffffffffffff1614155b15610b9c576060830151610b979073ffffffffffffffffffffffffffffffffffffffff83169088610e81565b600095505b5050508080610baa90611a1a565b915050610a2b565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461046d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610432565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610cb7816102bb565b610d1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e636f7272656374206d65726b6c652070726f6f66000000000000000000006044820152606401610432565b610d2f816000015182604001516109be565b15610dbc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4163636f756e742068617320616c726561647920636c61696d656420666f722060448201527f746869732077696e646f770000000000000000000000000000000000000000006064820152608401610432565b610dce816000015182604001516110d6565b806020015160016000836000015181526020019081526020016000206001016000828254610dfc9190611b0f565b9091555050805160009081526001602090815260409182902060020154606080850151855185870151858801518751928352958201529485019390935273ffffffffffffffffffffffffffffffffffffffff91821693919092169133917f18bdb6adb84039f917775d1fb8e7b7e7737ad5915d12eef0e4654b85e18d07b49101610633565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610f559084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261111f565b505050565b610f6381610cae565b60608101516020808301518351600090815260019092526040909120600201546108269273ffffffffffffffffffffffffffffffffffffffff90911691610e81565b60008581526001602081905260409091208381559081018590556002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790556003810161100f8382611b68565b506040805186815233602082015273ffffffffffffffffffffffffffffffffffffffff86169188917f521fe5bce65ac6af752c1083ec77facc5b6c13f40693e96eeca3747726fee9ad910160405180910390a360028101546108889073ffffffffffffffffffffffffffffffffffffffff1633308861122b565b600081815b84518110156110ce576110ba828683815181106110ad576110ad6119bc565b6020026020010151611289565b9150806110c681611a1a565b91505061108e565b509392505050565b60006110e461010083611ae7565b905060006110f461010084611afb565b6000948552600360209081526040808720948752939052919093208054600190921b90911790555050565b6000611181826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112b59092919063ffffffff16565b805190915015610f55578080602001905181019061119f9190611c82565b610f55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610432565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610bb29085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610ed3565b60008183106112a5576000828152602084905260409020610370565b5060009182526020526040902090565b60606112c484846000856112cc565b949350505050565b60608247101561135e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610432565b73ffffffffffffffffffffffffffffffffffffffff85163b6113dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610432565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516114059190611c9f565b60006040518083038185875af1925050503d8060008114611442576040519150601f19603f3d011682016040523d82523d6000602084013e611447565b606091505b5091509150611457828286611462565b979650505050505050565b60608315611471575081610370565b8251156114815782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104329190611cbb565b5080546114c190611a52565b6000825580601f106114d1575050565b601f01602090049060005260206000209081019061082691905b808211156114ff57600081556001016114eb565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561155557611555611503565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156115a2576115a2611503565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461082657600080fd5b600067ffffffffffffffff8211156115e6576115e6611503565b5060051b60200190565b600060a0828403121561160257600080fd5b61160a611532565b90508135815260208083013581830152604083013560408301526060830135611632816115aa565b6060830152608083013567ffffffffffffffff81111561165157600080fd5b8301601f8101851361166257600080fd5b8035611675611670826115cc565b61155b565b81815260059190911b8201830190838101908783111561169457600080fd5b928401925b828410156116b257833582529284019290840190611699565b6080860152509295945050505050565b6000602082840312156116d457600080fd5b813567ffffffffffffffff8111156116eb57600080fd5b6112c4848285016115f0565b6000602080838503121561170a57600080fd5b823567ffffffffffffffff8082111561172257600080fd5b818501915085601f83011261173657600080fd5b8135611744611670826115cc565b81815260059190911b8301840190848101908883111561176357600080fd5b8585015b8381101561179b5780358581111561177f5760008081fd5b61178d8b89838a01016115f0565b845250918601918601611767565b5098975050505050505050565b6000602082840312156117ba57600080fd5b8135610370816115aa565b801515811461082657600080fd5b600080604083850312156117e657600080fd5b82356117f1816115aa565b91506020830135611801816117c5565b809150509250929050565b60006020828403121561181e57600080fd5b5035919050565b60005b83811015611840578181015183820152602001611828565b50506000910152565b60008151808452611861816020860160208601611825565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff831660408201526080606082015260006118ce6080830184611849565b9695505050505050565b6000806000806000608086880312156118f057600080fd5b853594506020860135611902816115aa565b935060408601359250606086013567ffffffffffffffff8082111561192657600080fd5b818801915088601f83011261193a57600080fd5b81358181111561194957600080fd5b89602082850101111561195b57600080fd5b9699959850939650602001949392505050565b6000806040838503121561198157600080fd5b823561198c816115aa565b946020939093013593505050565b600080604083850312156119ad57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a4b57611a4b6119eb565b5060010190565b600181811c90821680611a6657607f821691505b602082108103611a9f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b80820180821115610a0857610a086119eb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611af657611af6611ab8565b500490565b600082611b0a57611b0a611ab8565b500690565b81810381811115610a0857610a086119eb565b601f821115610f5557600081815260208120601f850160051c81016020861015611b495750805b601f850160051c820191505b8181101561088857828155600101611b55565b815167ffffffffffffffff811115611b8257611b82611503565b611b9681611b908454611a52565b84611b22565b602080601f831160018114611be95760008415611bb35750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610888565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015611c3657888601518255948401946001909101908401611c17565b5085821015611c7257878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215611c9457600080fd5b8151610370816117c5565b60008251611cb1818460208701611825565b9190910192915050565b602081526000610370602083018461184956fea264697066735822122016c92f86d2815d5a69fb0146bd5085692389c02daebd3b98eb9b5b653d3ad56264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim((uint256,uint256,uint256,address,bytes32[]))": {
        "details": "Claim recipient must be equal to msg.sender.",
        "params": {
          "_claim": "claim object describing amount, accountIndex, account, window index, and merkle proof."
        }
      },
      "claimFor((uint256,uint256,uint256,address,bytes32[]))": {
        "details": "Caller must be in whitelistedClaimers struct set to \"true\".",
        "params": {
          "_claim": "leaf to claim."
        }
      },
      "claimMulti((uint256,uint256,uint256,address,bytes32[])[])": {
        "details": "All claim recipients must be equal to msg.sender.",
        "params": {
          "claims": "array of claims to claim."
        }
      },
      "deleteWindow(uint256)": {
        "details": "Callable only by owner. Likely to be followed by a withdrawRewards call to clear contract state.",
        "params": {
          "windowIndex": "merkle root index to delete."
        }
      },
      "getRewardTokenForWindow(uint256)": {
        "params": {
          "windowIndex": "merkle root to check."
        },
        "returns": {
          "_0": "address Reward token address"
        }
      },
      "isClaimed(uint256,uint256)": {
        "details": "This method will only work as intended if all `accountIndex`'s are unique for a given `windowIndex`.         The onus is on the Owner of this contract to submit only valid Merkle roots.",
        "params": {
          "accountIndex": "account index to check within window index.",
          "windowIndex": "merkle root to check."
        },
        "returns": {
          "_0": "True if claim has been executed already, False otherwise."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setWindow(uint256,address,bytes32,string)": {
        "params": {
          "ipfsHash": "hash of IPFS object, conveniently stored for clients",
          "merkleRoot": "merkle root describing allocation.",
          "rewardToken": "ERC20 reward token.",
          "rewardsToDeposit": "amount of rewards to deposit to seed this allocation."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verifyClaim((uint256,uint256,uint256,address,bytes32[]))": {
        "params": {
          "_claim": "claim object describing amount, accountIndex, account, window index, and merkle proof."
        },
        "returns": {
          "valid": "True if leaf exists."
        }
      },
      "whitelistClaimer(address,bool)": {
        "details": "Callable only by owner.",
        "params": {
          "newContract": "Reset claimer contract to this address.",
          "whitelist": "True to whitelist claimer, False otherwise."
        }
      },
      "withdrawRewards(address,uint256)": {
        "details": "Callable only by owner.",
        "params": {
          "amount": "amount of rewards to withdraw.",
          "rewardCurrency": "rewards to withdraw from contract."
        }
      }
    },
    "title": "Extended MerkleDistributor contract.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim((uint256,uint256,uint256,address,bytes32[]))": {
        "notice": "Claim amount of reward tokens for account, as described by Claim input object."
      },
      "claimFor((uint256,uint256,uint256,address,bytes32[]))": {
        "notice": "Executes merkle leaf claim on behaf of user. This can only be called by a trusted         claimer address. This function is designed to be called atomically with other transactions         that ultimately return the claimed amount to the rightful recipient. For example,         AcceleratingDistributor could call this function and then stake atomically on behalf of the user."
      },
      "claimMulti((uint256,uint256,uint256,address,bytes32[])[])": {
        "notice": "Batch claims to reduce gas versus individual submitting all claims. Method will fail         if any individual claims within the batch would fail."
      },
      "deleteWindow(uint256)": {
        "notice": "Delete merkle root at window index."
      },
      "getRewardTokenForWindow(uint256)": {
        "notice": "Returns rewardToken set by admin for windowIndex."
      },
      "isClaimed(uint256,uint256)": {
        "notice": "Returns True if the claim for `accountIndex` has already been completed for the Merkle root at         `windowIndex`."
      },
      "setWindow(uint256,address,bytes32,string)": {
        "notice": "Set merkle root for the next available window index and seed allocations.Callable only by owner of this contract. Caller must have approved this contract to transfer      `rewardsToDeposit` amount of `rewardToken` or this call will fail. Importantly, we assume that the      owner of this contract correctly chooses an amount `rewardsToDeposit` that is sufficient to cover all      claims within the `merkleRoot`."
      },
      "verifyClaim((uint256,uint256,uint256,address,bytes32[]))": {
        "notice": "Returns True if leaf described by {account, amount, accountIndex} is stored in Merkle root at given         window index."
      },
      "whitelistClaimer(address,bool)": {
        "notice": "Updates whitelisted claimer status."
      },
      "withdrawRewards(address,uint256)": {
        "notice": "Emergency method that transfers rewards out of the contract if the contract was configured improperly."
      }
    },
    "notice": "Adds additional constraints governing who can claim leaves from merkle windows.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 187,
        "contract": "@across-protocol/contracts-v2/contracts/merkle-distributor/AcrossMerkleDistributor.sol:AcrossMerkleDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2233,
        "contract": "@across-protocol/contracts-v2/contracts/merkle-distributor/AcrossMerkleDistributor.sol:AcrossMerkleDistributor",
        "label": "merkleWindows",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Window)2764_storage)"
      },
      {
        "astId": 2235,
        "contract": "@across-protocol/contracts-v2/contracts/merkle-distributor/AcrossMerkleDistributor.sol:AcrossMerkleDistributor",
        "label": "nextCreatedIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2241,
        "contract": "@across-protocol/contracts-v2/contracts/merkle-distributor/AcrossMerkleDistributor.sol:AcrossMerkleDistributor",
        "label": "claimedBitMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 15,
        "contract": "@across-protocol/contracts-v2/contracts/merkle-distributor/AcrossMerkleDistributor.sol:AcrossMerkleDistributor",
        "label": "whitelistedClaimers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)996": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Window)2764_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MerkleDistributorInterface.Window)",
        "numberOfBytes": "32",
        "value": "t_struct(Window)2764_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Window)2764_storage": {
        "encoding": "inplace",
        "label": "struct MerkleDistributorInterface.Window",
        "members": [
          {
            "astId": 2756,
            "contract": "@across-protocol/contracts-v2/contracts/merkle-distributor/AcrossMerkleDistributor.sol:AcrossMerkleDistributor",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 2758,
            "contract": "@across-protocol/contracts-v2/contracts/merkle-distributor/AcrossMerkleDistributor.sol:AcrossMerkleDistributor",
            "label": "remainingAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2761,
            "contract": "@across-protocol/contracts-v2/contracts/merkle-distributor/AcrossMerkleDistributor.sol:AcrossMerkleDistributor",
            "label": "rewardToken",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)996"
          },
          {
            "astId": 2763,
            "contract": "@across-protocol/contracts-v2/contracts/merkle-distributor/AcrossMerkleDistributor.sol:AcrossMerkleDistributor",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
